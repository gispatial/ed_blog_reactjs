{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImageUrlBuilder = void 0;\n\nvar models_1 = require(\"../models\");\n\nvar image_models_1 = require(\"./image.models\");\n\nvar ImageUrlBuilder =\n/** @class */\nfunction () {\n  function ImageUrlBuilder(\n  /** Image url */\n  imageUrl) {\n    this.imageUrl = imageUrl;\n    this.queryParams = [];\n    this.automaticFormatValue = 'format';\n  }\n  /**\r\n   * Used to add custom parameters to existing query string\r\n   * @param param Parameter (may or may not include value)\r\n   */\n\n\n  ImageUrlBuilder.prototype.withCustomParam = function (param) {\n    this.queryParams.push(new models_1.Parameters.CustomParameter(param));\n    return this;\n  };\n  /**\r\n   * The dpr transformation is used to serve correctly sized images for devices that expose a device pixel ratio.\r\n   * @param dpr A required DPR value.\r\n   */\n\n\n  ImageUrlBuilder.prototype.withDpr = function (dpr) {\n    this.queryParams.push(new models_1.Parameters.QueryParameter('dpr', dpr.toString()));\n    return this;\n  };\n  /**\r\n   * Applies the crop transformation that removes pixels from an image outside the specified rectangle.\r\n   * @param x Rectangle offset on the X-axis.\r\n   * @param y Rectangle offset on the Y-axis.\r\n   * @param width Rectangle width.\r\n   * @param height Rectangle height.\r\n   */\n\n\n  ImageUrlBuilder.prototype.withRectangleCrop = function (x, y, width, height) {\n    this.queryParams.push(new models_1.Parameters.QueryParameter('rect', [x, y, width, height].join(',')));\n    return this;\n  };\n  /**\r\n   * Applies the crop transformation centered on the specified point.\r\n   * @param x Focal point X coordinate.\r\n   * @param y Focal point Y coordinate.\r\n   * @param z Zoom of the transformation.\r\n   */\n\n\n  ImageUrlBuilder.prototype.withFocalPointCrop = function (x, y, z) {\n    this.withFitMode(image_models_1.ImageFitModeEnum.Crop);\n    this.queryParams.push(new models_1.Parameters.QueryParameter('crop', 'focalpoint'));\n    this.queryParams.push(new models_1.Parameters.QueryParameter('fp-x', x.toString()));\n    this.queryParams.push(new models_1.Parameters.QueryParameter('fp-y', y.toString()));\n    this.queryParams.push(new models_1.Parameters.QueryParameter('fp-z', z.toString()));\n    return this;\n  };\n  /**\r\n   * Enables WebP image support.\r\n   * @param compression Specifies the lossy or lossless compression.\r\n   */\n\n\n  ImageUrlBuilder.prototype.withAutomaticFormat = function (backupFormat) {\n    this.queryParams.push(new models_1.Parameters.QueryParameter('auto', this.automaticFormatValue));\n\n    if (backupFormat) {\n      this.withFormat(backupFormat);\n    }\n\n    return this;\n  };\n  /**\r\n   * The fit transformation controls how the output image is fit to its target dimensions after resizing.\r\n   * @param fitMode Specifies the mode for the transformation.\r\n   */\n\n\n  ImageUrlBuilder.prototype.withFitMode = function (fitMode) {\n    this.queryParams.push(new models_1.Parameters.QueryParameter('fit', fitMode));\n    return this;\n  };\n  /**\r\n   * Specifies the compression mode for the WebP image transformations.\r\n   * @param compression Specifies the lossy or lossless compression.\r\n   */\n\n\n  ImageUrlBuilder.prototype.withCompression = function (compression) {\n    this.queryParams.push(new models_1.Parameters.QueryParameter('lossless', compression === image_models_1.ImageCompressionEnum.Lossless ? 'true' : 'false'));\n    return this;\n  };\n  /**\r\n   * Applies the quality parameter that enables control over the compression level for lossy file-formatted images.\r\n   * @param quality The required quality of the image.\r\n   */\n\n\n  ImageUrlBuilder.prototype.withQuality = function (quality) {\n    this.queryParams.push(new models_1.Parameters.QueryParameter('q', quality.toString()));\n    return this;\n  };\n  /**\r\n   * The format transformation enables the source image to be converted (a.k.a., \"transcoded\") from\r\n   * one encoded format to another. This is very useful when the source image has been saved in a sub-optimal\r\n   * file format that hinders performance.\r\n   * @param format Target image file type.\r\n   */\n\n\n  ImageUrlBuilder.prototype.withFormat = function (format) {\n    this.queryParams.push(new models_1.Parameters.QueryParameter('fm', format));\n    return this;\n  };\n  /**\r\n   * The height transformation enables dynamic height resizing based on pixels and percent values.\r\n   * @param height A required image height.\r\n   */\n\n\n  ImageUrlBuilder.prototype.withHeight = function (height) {\n    this.queryParams.push(new models_1.Parameters.QueryParameter('h', height.toString()));\n    return this;\n  };\n  /**\r\n   * The width transformation enables dynamic width resizing based on pixels and percent values.\r\n   * @param width A required image width.\r\n   */\n\n\n  ImageUrlBuilder.prototype.withWidth = function (width) {\n    this.queryParams.push(new models_1.Parameters.QueryParameter('w', width.toString()));\n    return this;\n  };\n  /**\r\n   * Gets params applied to image\r\n   */\n\n\n  ImageUrlBuilder.prototype.getParams = function () {\n    return this.queryParams;\n  };\n  /**\r\n   * Gets query string part of the image URL\r\n   */\n\n\n  ImageUrlBuilder.prototype.getQueryString = function () {\n    var query = '';\n    this.queryParams.forEach(function (filter) {\n      if (query.indexOf('?') > -1) {\n        query = query + '&' + filter.getParam();\n      } else {\n        query = query + '?' + filter.getParam();\n      }\n    });\n    return query;\n  };\n  /**\r\n   * Gets full transformed url to image with parameters\r\n   */\n\n\n  ImageUrlBuilder.prototype.getUrl = function () {\n    return this.imageUrl + this.getQueryString();\n  };\n\n  return ImageUrlBuilder;\n}();\n\nexports.ImageUrlBuilder = ImageUrlBuilder;","map":{"version":3,"sources":["../../lib/images/image-url-builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ImageUrlBuilder = void 0;\r\nvar models_1 = require(\"../models\");\r\nvar image_models_1 = require(\"./image.models\");\r\nvar ImageUrlBuilder = /** @class */ (function () {\r\n    function ImageUrlBuilder(\r\n    /** Image url */\r\n    imageUrl) {\r\n        this.imageUrl = imageUrl;\r\n        this.queryParams = [];\r\n        this.automaticFormatValue = 'format';\r\n    }\r\n    /**\r\n     * Used to add custom parameters to existing query string\r\n     * @param param Parameter (may or may not include value)\r\n     */\r\n    ImageUrlBuilder.prototype.withCustomParam = function (param) {\r\n        this.queryParams.push(new models_1.Parameters.CustomParameter(param));\r\n        return this;\r\n    };\r\n    /**\r\n     * The dpr transformation is used to serve correctly sized images for devices that expose a device pixel ratio.\r\n     * @param dpr A required DPR value.\r\n     */\r\n    ImageUrlBuilder.prototype.withDpr = function (dpr) {\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('dpr', dpr.toString()));\r\n        return this;\r\n    };\r\n    /**\r\n     * Applies the crop transformation that removes pixels from an image outside the specified rectangle.\r\n     * @param x Rectangle offset on the X-axis.\r\n     * @param y Rectangle offset on the Y-axis.\r\n     * @param width Rectangle width.\r\n     * @param height Rectangle height.\r\n     */\r\n    ImageUrlBuilder.prototype.withRectangleCrop = function (x, y, width, height) {\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('rect', [x, y, width, height].join(',')));\r\n        return this;\r\n    };\r\n    /**\r\n     * Applies the crop transformation centered on the specified point.\r\n     * @param x Focal point X coordinate.\r\n     * @param y Focal point Y coordinate.\r\n     * @param z Zoom of the transformation.\r\n     */\r\n    ImageUrlBuilder.prototype.withFocalPointCrop = function (x, y, z) {\r\n        this.withFitMode(image_models_1.ImageFitModeEnum.Crop);\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('crop', 'focalpoint'));\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('fp-x', x.toString()));\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('fp-y', y.toString()));\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('fp-z', z.toString()));\r\n        return this;\r\n    };\r\n    /**\r\n     * Enables WebP image support.\r\n     * @param compression Specifies the lossy or lossless compression.\r\n     */\r\n    ImageUrlBuilder.prototype.withAutomaticFormat = function (backupFormat) {\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('auto', this.automaticFormatValue));\r\n        if (backupFormat) {\r\n            this.withFormat(backupFormat);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * The fit transformation controls how the output image is fit to its target dimensions after resizing.\r\n     * @param fitMode Specifies the mode for the transformation.\r\n     */\r\n    ImageUrlBuilder.prototype.withFitMode = function (fitMode) {\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('fit', fitMode));\r\n        return this;\r\n    };\r\n    /**\r\n     * Specifies the compression mode for the WebP image transformations.\r\n     * @param compression Specifies the lossy or lossless compression.\r\n     */\r\n    ImageUrlBuilder.prototype.withCompression = function (compression) {\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('lossless', compression === image_models_1.ImageCompressionEnum.Lossless ? 'true' : 'false'));\r\n        return this;\r\n    };\r\n    /**\r\n     * Applies the quality parameter that enables control over the compression level for lossy file-formatted images.\r\n     * @param quality The required quality of the image.\r\n     */\r\n    ImageUrlBuilder.prototype.withQuality = function (quality) {\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('q', quality.toString()));\r\n        return this;\r\n    };\r\n    /**\r\n     * The format transformation enables the source image to be converted (a.k.a., \"transcoded\") from\r\n     * one encoded format to another. This is very useful when the source image has been saved in a sub-optimal\r\n     * file format that hinders performance.\r\n     * @param format Target image file type.\r\n     */\r\n    ImageUrlBuilder.prototype.withFormat = function (format) {\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('fm', format));\r\n        return this;\r\n    };\r\n    /**\r\n     * The height transformation enables dynamic height resizing based on pixels and percent values.\r\n     * @param height A required image height.\r\n     */\r\n    ImageUrlBuilder.prototype.withHeight = function (height) {\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('h', height.toString()));\r\n        return this;\r\n    };\r\n    /**\r\n     * The width transformation enables dynamic width resizing based on pixels and percent values.\r\n     * @param width A required image width.\r\n     */\r\n    ImageUrlBuilder.prototype.withWidth = function (width) {\r\n        this.queryParams.push(new models_1.Parameters.QueryParameter('w', width.toString()));\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets params applied to image\r\n     */\r\n    ImageUrlBuilder.prototype.getParams = function () {\r\n        return this.queryParams;\r\n    };\r\n    /**\r\n     * Gets query string part of the image URL\r\n     */\r\n    ImageUrlBuilder.prototype.getQueryString = function () {\r\n        var query = '';\r\n        this.queryParams.forEach(function (filter) {\r\n            if (query.indexOf('?') > -1) {\r\n                query = query + '&' + filter.getParam();\r\n            }\r\n            else {\r\n                query = query + '?' + filter.getParam();\r\n            }\r\n        });\r\n        return query;\r\n    };\r\n    /**\r\n     * Gets full transformed url to image with parameters\r\n     */\r\n    ImageUrlBuilder.prototype.getUrl = function () {\r\n        return this.imageUrl + this.getQueryString();\r\n    };\r\n    return ImageUrlBuilder;\r\n}());\r\nexports.ImageUrlBuilder = ImageUrlBuilder;\r\n//# sourceMappingURL=image-url-builder.js.map"]},"metadata":{},"sourceType":"script"}