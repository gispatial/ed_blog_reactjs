{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Parameters = void 0;\n\nvar sort_order_enum_1 = require(\"./sort-order.enum\");\n\nvar Parameters;\n\n(function (Parameters) {\n  var defaultValue = '';\n\n  var QueryParameter =\n  /** @class */\n  function () {\n    /**\r\n     * Parameter\r\n     * @constructor\r\n     * @param {string} name - Name of the parameter\r\n     * @param {string} value - Value of the parameter\r\n     */\n    function QueryParameter(name, value) {\n      this.name = name;\n      this.value = value;\n\n      if (!name) {\n        throw Error(\"Name of the parameter is not specified\");\n      }\n    }\n\n    QueryParameter.prototype.getParam = function () {\n      return this.name + \"=\" + this.value;\n    };\n\n    return QueryParameter;\n  }();\n\n  Parameters.QueryParameter = QueryParameter;\n\n  var ElementsParameter =\n  /** @class */\n  function () {\n    /**\r\n     * Sets elements (projection) so that only certain elements from a content item are returned\r\n     * @constructor\r\n     * @param {string[]} elementCodenames - Array of element codenames to include in response.\r\n     */\n    function ElementsParameter(elementCodenames) {\n      this.elementCodenames = elementCodenames;\n    }\n\n    ElementsParameter.prototype.getParam = function () {\n      return \"elements=\" + this.getParamValue();\n    };\n\n    ElementsParameter.prototype.getParamValue = function () {\n      if (!this.elementCodenames) {\n        return defaultValue;\n      }\n\n      return this.elementCodenames.map(function (m) {\n        if (!m) {\n          throw Error(\"Codename of 'ElementsParameter' cannot be null or empty\");\n        }\n\n        return m.trim();\n      }).join(',');\n    };\n\n    return ElementsParameter;\n  }();\n\n  Parameters.ElementsParameter = ElementsParameter;\n\n  var LimitParameter =\n  /** @class */\n  function () {\n    /**\r\n     * Limits the number of items that are returned from response\r\n     * @constructor\r\n     * @param {number} limit - Number of elements that will be returned\r\n     */\n    function LimitParameter(limit) {\n      this.limit = limit;\n\n      if (limit <= 0) {\n        throw Error(\"'LimitParameter' must specify a positive integer\");\n      }\n    }\n\n    LimitParameter.prototype.getParam = function () {\n      return \"limit=\" + this.limit;\n    };\n\n    return LimitParameter;\n  }();\n\n  Parameters.LimitParameter = LimitParameter;\n\n  var IncludeTotalCountParameter =\n  /** @class */\n  function () {\n    /**\r\n     * Adds 'includeTotalCount' query parameter to query\r\n     * @constructor\r\n     */\n    function IncludeTotalCountParameter() {}\n\n    IncludeTotalCountParameter.prototype.getParam = function () {\n      return \"includeTotalCount=true\";\n    };\n\n    return IncludeTotalCountParameter;\n  }();\n\n  Parameters.IncludeTotalCountParameter = IncludeTotalCountParameter;\n\n  var SkipParameter =\n  /** @class */\n  function () {\n    /**\r\n     * Configures response to skip certain number of items\r\n     * @constructor\r\n     * @param {number} skip - Number of content items that will be skipped\r\n     */\n    function SkipParameter(skip) {\n      this.skip = skip;\n\n      if (skip < 0) {\n        throw Error(\"'SkipParameter' must specify a positive integer number or zero.\\\"\");\n      }\n    }\n\n    SkipParameter.prototype.getParam = function () {\n      return \"skip=\" + this.skip;\n    };\n\n    return SkipParameter;\n  }();\n\n  Parameters.SkipParameter = SkipParameter;\n\n  var OrderParameter =\n  /** @class */\n  function () {\n    /**\r\n     * Sorts the response based on given element.\r\n     * @constructor\r\n     * @param {string} element - Element that will be used for sorting (can be both elements.<elementname> or system.<elementname>)\r\n     * @param {SortOrder} sortOrder - Order type (desc/asc). Defaults to 'asc' if SortOrder is null or invalid.\r\n     */\n    function OrderParameter(element, sortOrder) {\n      this.element = element;\n      this.sortOrder = sortOrder;\n\n      if (!element) {\n        throw Error(\"Element specified in 'OrderParameter' is null or empty\");\n      }\n    }\n\n    OrderParameter.prototype.getParam = function () {\n      return \"order=\" + this.getParamValue();\n    };\n\n    OrderParameter.prototype.getParamValue = function () {\n      var order;\n\n      if (this.sortOrder === sort_order_enum_1.SortOrder.desc) {\n        order = 'desc';\n      } else {\n        order = 'asc';\n      }\n\n      return this.element.trim() + \"[\" + order + \"]\";\n    };\n\n    return OrderParameter;\n  }();\n\n  Parameters.OrderParameter = OrderParameter;\n\n  var CustomParameter =\n  /** @class */\n  function () {\n    function CustomParameter(param) {\n      this.param = param;\n    }\n\n    CustomParameter.prototype.getParam = function () {\n      return this.param;\n    };\n\n    return CustomParameter;\n  }();\n\n  Parameters.CustomParameter = CustomParameter;\n\n  var DepthParameter =\n  /** @class */\n  function () {\n    /**\r\n     * Configures the depth of the response. Content items might reference another 'linked items' using the Linked items element.\r\n     * Recursively, these linked items can reference another linked items.\r\n     * By default, only one level of linked content is returned.\r\n     * @constructor\r\n     * @param {number} depth - Depth fo the response\r\n     */\n    function DepthParameter(depth) {\n      this.depth = depth;\n\n      if (depth < 0) {\n        throw Error(\"'DepthParameter' must specify a positive integer or zero\");\n      }\n    }\n\n    DepthParameter.prototype.getParam = function () {\n      return \"depth=\" + this.depth;\n    };\n\n    return DepthParameter;\n  }();\n\n  Parameters.DepthParameter = DepthParameter;\n\n  var LanguageParameter =\n  /** @class */\n  function () {\n    /**\r\n     * Specifies language version to fetch\r\n     * @constructor\r\n     * @param {string} languageCodename - Codename of the language\r\n     */\n    function LanguageParameter(languageCodename) {\n      this.languageCodename = languageCodename;\n\n      if (!languageCodename) {\n        throw Error(\"'LanguageParameter' must specify codename of the language\");\n      }\n    }\n\n    LanguageParameter.prototype.getParam = function () {\n      return \"language=\" + this.languageCodename;\n    };\n\n    return LanguageParameter;\n  }();\n\n  Parameters.LanguageParameter = LanguageParameter;\n})(Parameters = exports.Parameters || (exports.Parameters = {}));","map":{"version":3,"sources":["../../../lib/models/common/parameters.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Parameters = void 0;\r\nvar sort_order_enum_1 = require(\"./sort-order.enum\");\r\nvar Parameters;\r\n(function (Parameters) {\r\n    var defaultValue = '';\r\n    var QueryParameter = /** @class */ (function () {\r\n        /**\r\n         * Parameter\r\n         * @constructor\r\n         * @param {string} name - Name of the parameter\r\n         * @param {string} value - Value of the parameter\r\n         */\r\n        function QueryParameter(name, value) {\r\n            this.name = name;\r\n            this.value = value;\r\n            if (!name) {\r\n                throw Error(\"Name of the parameter is not specified\");\r\n            }\r\n        }\r\n        QueryParameter.prototype.getParam = function () {\r\n            return this.name + \"=\" + this.value;\r\n        };\r\n        return QueryParameter;\r\n    }());\r\n    Parameters.QueryParameter = QueryParameter;\r\n    var ElementsParameter = /** @class */ (function () {\r\n        /**\r\n         * Sets elements (projection) so that only certain elements from a content item are returned\r\n         * @constructor\r\n         * @param {string[]} elementCodenames - Array of element codenames to include in response.\r\n         */\r\n        function ElementsParameter(elementCodenames) {\r\n            this.elementCodenames = elementCodenames;\r\n        }\r\n        ElementsParameter.prototype.getParam = function () {\r\n            return \"elements=\" + this.getParamValue();\r\n        };\r\n        ElementsParameter.prototype.getParamValue = function () {\r\n            if (!this.elementCodenames) {\r\n                return defaultValue;\r\n            }\r\n            return this.elementCodenames\r\n                .map(function (m) {\r\n                if (!m) {\r\n                    throw Error(\"Codename of 'ElementsParameter' cannot be null or empty\");\r\n                }\r\n                return m.trim();\r\n            })\r\n                .join(',');\r\n        };\r\n        return ElementsParameter;\r\n    }());\r\n    Parameters.ElementsParameter = ElementsParameter;\r\n    var LimitParameter = /** @class */ (function () {\r\n        /**\r\n         * Limits the number of items that are returned from response\r\n         * @constructor\r\n         * @param {number} limit - Number of elements that will be returned\r\n         */\r\n        function LimitParameter(limit) {\r\n            this.limit = limit;\r\n            if (limit <= 0) {\r\n                throw Error(\"'LimitParameter' must specify a positive integer\");\r\n            }\r\n        }\r\n        LimitParameter.prototype.getParam = function () {\r\n            return \"limit=\" + this.limit;\r\n        };\r\n        return LimitParameter;\r\n    }());\r\n    Parameters.LimitParameter = LimitParameter;\r\n    var IncludeTotalCountParameter = /** @class */ (function () {\r\n        /**\r\n         * Adds 'includeTotalCount' query parameter to query\r\n         * @constructor\r\n         */\r\n        function IncludeTotalCountParameter() {\r\n        }\r\n        IncludeTotalCountParameter.prototype.getParam = function () {\r\n            return \"includeTotalCount=true\";\r\n        };\r\n        return IncludeTotalCountParameter;\r\n    }());\r\n    Parameters.IncludeTotalCountParameter = IncludeTotalCountParameter;\r\n    var SkipParameter = /** @class */ (function () {\r\n        /**\r\n         * Configures response to skip certain number of items\r\n         * @constructor\r\n         * @param {number} skip - Number of content items that will be skipped\r\n         */\r\n        function SkipParameter(skip) {\r\n            this.skip = skip;\r\n            if (skip < 0) {\r\n                throw Error(\"'SkipParameter' must specify a positive integer number or zero.\\\"\");\r\n            }\r\n        }\r\n        SkipParameter.prototype.getParam = function () {\r\n            return \"skip=\" + this.skip;\r\n        };\r\n        return SkipParameter;\r\n    }());\r\n    Parameters.SkipParameter = SkipParameter;\r\n    var OrderParameter = /** @class */ (function () {\r\n        /**\r\n         * Sorts the response based on given element.\r\n         * @constructor\r\n         * @param {string} element - Element that will be used for sorting (can be both elements.<elementname> or system.<elementname>)\r\n         * @param {SortOrder} sortOrder - Order type (desc/asc). Defaults to 'asc' if SortOrder is null or invalid.\r\n         */\r\n        function OrderParameter(element, sortOrder) {\r\n            this.element = element;\r\n            this.sortOrder = sortOrder;\r\n            if (!element) {\r\n                throw Error(\"Element specified in 'OrderParameter' is null or empty\");\r\n            }\r\n        }\r\n        OrderParameter.prototype.getParam = function () {\r\n            return \"order=\" + this.getParamValue();\r\n        };\r\n        OrderParameter.prototype.getParamValue = function () {\r\n            var order;\r\n            if (this.sortOrder === sort_order_enum_1.SortOrder.desc) {\r\n                order = 'desc';\r\n            }\r\n            else {\r\n                order = 'asc';\r\n            }\r\n            return this.element.trim() + \"[\" + order + \"]\";\r\n        };\r\n        return OrderParameter;\r\n    }());\r\n    Parameters.OrderParameter = OrderParameter;\r\n    var CustomParameter = /** @class */ (function () {\r\n        function CustomParameter(param) {\r\n            this.param = param;\r\n        }\r\n        CustomParameter.prototype.getParam = function () {\r\n            return this.param;\r\n        };\r\n        return CustomParameter;\r\n    }());\r\n    Parameters.CustomParameter = CustomParameter;\r\n    var DepthParameter = /** @class */ (function () {\r\n        /**\r\n         * Configures the depth of the response. Content items might reference another 'linked items' using the Linked items element.\r\n         * Recursively, these linked items can reference another linked items.\r\n         * By default, only one level of linked content is returned.\r\n         * @constructor\r\n         * @param {number} depth - Depth fo the response\r\n         */\r\n        function DepthParameter(depth) {\r\n            this.depth = depth;\r\n            if (depth < 0) {\r\n                throw Error(\"'DepthParameter' must specify a positive integer or zero\");\r\n            }\r\n        }\r\n        DepthParameter.prototype.getParam = function () {\r\n            return \"depth=\" + this.depth;\r\n        };\r\n        return DepthParameter;\r\n    }());\r\n    Parameters.DepthParameter = DepthParameter;\r\n    var LanguageParameter = /** @class */ (function () {\r\n        /**\r\n         * Specifies language version to fetch\r\n         * @constructor\r\n         * @param {string} languageCodename - Codename of the language\r\n         */\r\n        function LanguageParameter(languageCodename) {\r\n            this.languageCodename = languageCodename;\r\n            if (!languageCodename) {\r\n                throw Error(\"'LanguageParameter' must specify codename of the language\");\r\n            }\r\n        }\r\n        LanguageParameter.prototype.getParam = function () {\r\n            return \"language=\" + this.languageCodename;\r\n        };\r\n        return LanguageParameter;\r\n    }());\r\n    Parameters.LanguageParameter = LanguageParameter;\r\n})(Parameters = exports.Parameters || (exports.Parameters = {}));\r\n//# sourceMappingURL=parameters.js.map"]},"metadata":{},"sourceType":"script"}