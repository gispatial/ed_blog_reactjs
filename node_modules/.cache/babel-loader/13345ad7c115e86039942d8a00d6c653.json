{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultipleItemQuery = void 0;\n\nvar models_1 = require(\"../../models\");\n\nvar base_item_query_class_1 = require(\"./base-item-query.class\");\n\nvar MultipleItemQuery =\n/** @class */\nfunction (_super) {\n  __extends(MultipleItemQuery, _super);\n\n  function MultipleItemQuery(config, queryService) {\n    var _this = _super.call(this, config, queryService) || this;\n\n    _this.config = config;\n    _this.queryService = queryService;\n    return _this;\n  }\n  /**\r\n   * Adds information about the total number of content items matching your query.\r\n   * When set to true, the pagination object returned in the API response contains\r\n   * an additional total_count property.\r\n   */\n\n\n  MultipleItemQuery.prototype.includeTotalCountParameter = function () {\n    this.parameters.push(new models_1.Parameters.IncludeTotalCountParameter());\n    return this;\n  };\n  /**\r\n   * Gets only item of given type\r\n   * @param type Codename of type to get\r\n   */\n\n\n  MultipleItemQuery.prototype.type = function (type) {\n    this.parameters.push(new models_1.Filters.TypeFilter(type));\n    return this;\n  };\n  /**\r\n   * Gets items of given types (logical or)\r\n   * I.e. get items of either 'Actor' or 'Movie' type\r\n   * @param types Types to get\r\n   */\n\n\n  MultipleItemQuery.prototype.types = function (types) {\n    this.parameters.push(new models_1.Filters.TypeFilter(types));\n    return this;\n  };\n  /**\r\n   * Gets only item from given collection\r\n   * @param collection Codename of collection to get\r\n   */\n\n\n  MultipleItemQuery.prototype.collection = function (collection) {\n    this.parameters.push(new models_1.Filters.CollectionFilter(collection));\n    return this;\n  };\n  /**\r\n   * Gets items from given collections (logical or)\r\n   * I.e. get items of either 'default' or 'christmas-campaign' collection\r\n   * @param collections Collections to get\r\n   */\n\n\n  MultipleItemQuery.prototype.collections = function (collections) {\n    this.parameters.push(new models_1.Filters.CollectionFilter(collections));\n    return this;\n  };\n  /**\r\n  * Empty filter condition\r\n  * @param element Element with empty value\r\n  */\n\n\n  MultipleItemQuery.prototype.emptyFilter = function (element) {\n    this.parameters.push(new models_1.Filters.EmptyFilter(element));\n    return this;\n  };\n  /**\r\n   * Not empty filter condition\r\n   * @param element Element with non-empty value\r\n   */\n\n\n  MultipleItemQuery.prototype.notEmptyFilter = function (element) {\n    this.parameters.push(new models_1.Filters.NotEmptyFilter(element));\n    return this;\n  };\n  /**\r\n   * Equals filter condition\r\n   * @param element Element to filter. Example: 'elements.movie'\r\n   * @param value Value to match. Example: 'Kingsman'\r\n   */\n\n\n  MultipleItemQuery.prototype.equalsFilter = function (element, value) {\n    this.parameters.push(new models_1.Filters.EqualsFilter(element, value));\n    return this;\n  };\n  /**\r\n   * Not equals filter condition\r\n   * @param element Element to filter. Example: 'elements.movie'\r\n   * @param value Value to match. Example: 'Kingsman'\r\n   */\n\n\n  MultipleItemQuery.prototype.notEqualsFilter = function (element, value) {\n    this.parameters.push(new models_1.Filters.NotEqualsFilter(element, value));\n    return this;\n  };\n  /**\r\n   * All filter\r\n   * @param element Element to filter.\r\n   * @param values Values\r\n   */\n\n\n  MultipleItemQuery.prototype.allFilter = function (element, values) {\n    this.parameters.push(new models_1.Filters.AllFilter(element, values));\n    return this;\n  };\n  /**\r\n   * Any filter\r\n   * @param element Element to filter.\r\n   * @param values Values\r\n   */\n\n\n  MultipleItemQuery.prototype.anyFilter = function (element, values) {\n    this.parameters.push(new models_1.Filters.AnyFilter(element, values));\n    return this;\n  };\n  /**\r\n   * Contains filter\r\n   * @param element Element to filter.\r\n   * @param values Values\r\n   */\n\n\n  MultipleItemQuery.prototype.containsFilter = function (element, values) {\n    this.parameters.push(new models_1.Filters.ContainsFilter(element, values));\n    return this;\n  };\n  /**\r\n   * Greater then filter\r\n   * @param element Element to filter.\r\n   * @param value Value\r\n   */\n\n\n  MultipleItemQuery.prototype.greaterThanFilter = function (element, value) {\n    this.parameters.push(new models_1.Filters.GreaterThanFilter(element, value));\n    return this;\n  };\n  /**\r\n   * Greater then or equals filter\r\n   * @param element Element to filter.\r\n   * @param value Value\r\n   */\n\n\n  MultipleItemQuery.prototype.greaterThanOrEqualFilter = function (element, value) {\n    this.parameters.push(new models_1.Filters.GreaterThanOrEqualFilter(element, value));\n    return this;\n  };\n  /**\r\n   * Indicates depth of query that affects loading of nested linked items.\r\n   * @param depth Depth of the query (> 0)\r\n   */\n\n\n  MultipleItemQuery.prototype.depthParameter = function (depth) {\n    this.parameters.push(new models_1.Parameters.DepthParameter(depth));\n    return this;\n  };\n  /**\r\n   * In filter\r\n   * @param element Element to filter.\r\n   * @param values Values\r\n   */\n\n\n  MultipleItemQuery.prototype.inFilter = function (element, values) {\n    this.parameters.push(new models_1.Filters.InFilter(element, values));\n    return this;\n  };\n  /**\r\n   * Not in filter\r\n   * @param element Element to filter.\r\n   * @param values Values\r\n   */\n\n\n  MultipleItemQuery.prototype.notInFilter = function (element, values) {\n    this.parameters.push(new models_1.Filters.NotInFilter(element, values));\n    return this;\n  };\n  /**\r\n   * Less then filter\r\n   * @param element Element to filter.\r\n   * @param value Value\r\n   */\n\n\n  MultipleItemQuery.prototype.lessThanFilter = function (element, value) {\n    this.parameters.push(new models_1.Filters.LessThanFilter(element, value));\n    return this;\n  };\n  /**\r\n   * @param element Element to filter.\r\n   * @param value Value\r\n   */\n\n\n  MultipleItemQuery.prototype.lessThanOrEqualFilter = function (element, value) {\n    this.parameters.push(new models_1.Filters.LessThanOrEqualFilter(element, value));\n    return this;\n  };\n  /**\r\n   * @param element Element to filter.\r\n   * @param lowerValue Lower value of range (e.g. 2)\r\n   * @param higherValue Higher value of range (e.g. 10)\r\n   */\n\n\n  MultipleItemQuery.prototype.rangeFilter = function (element, lowerValue, higherValue) {\n    this.parameters.push(new models_1.Filters.RangeFilter(element, lowerValue, higherValue));\n    return this;\n  };\n  /**\r\n   * Limits the number of items returned by query\r\n   * @param limit Number of items to load\r\n   */\n\n\n  MultipleItemQuery.prototype.limitParameter = function (limit) {\n    this.parameters.push(new models_1.Parameters.LimitParameter(limit));\n    return this;\n  };\n  /**\r\n   * Orders query based on given element and sort order\r\n   * @param element Element by which to order\r\n   * @param sortOrder Asc/Desc order type\r\n   */\n\n\n  MultipleItemQuery.prototype.orderParameter = function (element, sortOrder) {\n    this.parameters.push(new models_1.Parameters.OrderParameter(element, sortOrder));\n    return this;\n  };\n  /**\r\n   * Sets descending order on given element\r\n   * @param element Element by which to order\r\n   */\n\n\n  MultipleItemQuery.prototype.orderByDescending = function (element) {\n    this.parameters.push(new models_1.Parameters.OrderParameter(element, models_1.SortOrder.desc));\n    return this;\n  };\n  /**\r\n   * Sets Ascending order on given element\r\n   * @param element Element by which to order\r\n   */\n\n\n  MultipleItemQuery.prototype.orderByAscending = function (element) {\n    this.parameters.push(new models_1.Parameters.OrderParameter(element, models_1.SortOrder.asc));\n    return this;\n  };\n  /**\r\n   * Skips the selected number of items\r\n   * @param skip Number of items to skip\r\n   */\n\n\n  MultipleItemQuery.prototype.skipParameter = function (skip) {\n    this.parameters.push(new models_1.Parameters.SkipParameter(skip));\n    return this;\n  };\n  /**\r\n   * Gets the runnable Observable\r\n   */\n\n\n  MultipleItemQuery.prototype.toObservable = function () {\n    return _super.prototype.runMultipleItemsQuery.call(this);\n  };\n  /**\r\n   * Gets 'Url' representation of query\r\n   */\n\n\n  MultipleItemQuery.prototype.getUrl = function () {\n    return _super.prototype.getMultipleItemsQueryUrl.call(this);\n  };\n\n  return MultipleItemQuery;\n}(base_item_query_class_1.BaseItemQuery);\n\nexports.MultipleItemQuery = MultipleItemQuery;","map":{"version":3,"sources":["../../../lib/query/item/multiple-item-query.class.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MultipleItemQuery = void 0;\r\nvar models_1 = require(\"../../models\");\r\nvar base_item_query_class_1 = require(\"./base-item-query.class\");\r\nvar MultipleItemQuery = /** @class */ (function (_super) {\r\n    __extends(MultipleItemQuery, _super);\r\n    function MultipleItemQuery(config, queryService) {\r\n        var _this = _super.call(this, config, queryService) || this;\r\n        _this.config = config;\r\n        _this.queryService = queryService;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Adds information about the total number of content items matching your query.\r\n     * When set to true, the pagination object returned in the API response contains\r\n     * an additional total_count property.\r\n     */\r\n    MultipleItemQuery.prototype.includeTotalCountParameter = function () {\r\n        this.parameters.push(new models_1.Parameters.IncludeTotalCountParameter());\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets only item of given type\r\n     * @param type Codename of type to get\r\n     */\r\n    MultipleItemQuery.prototype.type = function (type) {\r\n        this.parameters.push(new models_1.Filters.TypeFilter(type));\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets items of given types (logical or)\r\n     * I.e. get items of either 'Actor' or 'Movie' type\r\n     * @param types Types to get\r\n     */\r\n    MultipleItemQuery.prototype.types = function (types) {\r\n        this.parameters.push(new models_1.Filters.TypeFilter(types));\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets only item from given collection\r\n     * @param collection Codename of collection to get\r\n     */\r\n    MultipleItemQuery.prototype.collection = function (collection) {\r\n        this.parameters.push(new models_1.Filters.CollectionFilter(collection));\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets items from given collections (logical or)\r\n     * I.e. get items of either 'default' or 'christmas-campaign' collection\r\n     * @param collections Collections to get\r\n     */\r\n    MultipleItemQuery.prototype.collections = function (collections) {\r\n        this.parameters.push(new models_1.Filters.CollectionFilter(collections));\r\n        return this;\r\n    };\r\n    /**\r\n    * Empty filter condition\r\n    * @param element Element with empty value\r\n    */\r\n    MultipleItemQuery.prototype.emptyFilter = function (element) {\r\n        this.parameters.push(new models_1.Filters.EmptyFilter(element));\r\n        return this;\r\n    };\r\n    /**\r\n     * Not empty filter condition\r\n     * @param element Element with non-empty value\r\n     */\r\n    MultipleItemQuery.prototype.notEmptyFilter = function (element) {\r\n        this.parameters.push(new models_1.Filters.NotEmptyFilter(element));\r\n        return this;\r\n    };\r\n    /**\r\n     * Equals filter condition\r\n     * @param element Element to filter. Example: 'elements.movie'\r\n     * @param value Value to match. Example: 'Kingsman'\r\n     */\r\n    MultipleItemQuery.prototype.equalsFilter = function (element, value) {\r\n        this.parameters.push(new models_1.Filters.EqualsFilter(element, value));\r\n        return this;\r\n    };\r\n    /**\r\n     * Not equals filter condition\r\n     * @param element Element to filter. Example: 'elements.movie'\r\n     * @param value Value to match. Example: 'Kingsman'\r\n     */\r\n    MultipleItemQuery.prototype.notEqualsFilter = function (element, value) {\r\n        this.parameters.push(new models_1.Filters.NotEqualsFilter(element, value));\r\n        return this;\r\n    };\r\n    /**\r\n     * All filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    MultipleItemQuery.prototype.allFilter = function (element, values) {\r\n        this.parameters.push(new models_1.Filters.AllFilter(element, values));\r\n        return this;\r\n    };\r\n    /**\r\n     * Any filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    MultipleItemQuery.prototype.anyFilter = function (element, values) {\r\n        this.parameters.push(new models_1.Filters.AnyFilter(element, values));\r\n        return this;\r\n    };\r\n    /**\r\n     * Contains filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    MultipleItemQuery.prototype.containsFilter = function (element, values) {\r\n        this.parameters.push(new models_1.Filters.ContainsFilter(element, values));\r\n        return this;\r\n    };\r\n    /**\r\n     * Greater then filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    MultipleItemQuery.prototype.greaterThanFilter = function (element, value) {\r\n        this.parameters.push(new models_1.Filters.GreaterThanFilter(element, value));\r\n        return this;\r\n    };\r\n    /**\r\n     * Greater then or equals filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    MultipleItemQuery.prototype.greaterThanOrEqualFilter = function (element, value) {\r\n        this.parameters.push(new models_1.Filters.GreaterThanOrEqualFilter(element, value));\r\n        return this;\r\n    };\r\n    /**\r\n     * Indicates depth of query that affects loading of nested linked items.\r\n     * @param depth Depth of the query (> 0)\r\n     */\r\n    MultipleItemQuery.prototype.depthParameter = function (depth) {\r\n        this.parameters.push(new models_1.Parameters.DepthParameter(depth));\r\n        return this;\r\n    };\r\n    /**\r\n     * In filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    MultipleItemQuery.prototype.inFilter = function (element, values) {\r\n        this.parameters.push(new models_1.Filters.InFilter(element, values));\r\n        return this;\r\n    };\r\n    /**\r\n     * Not in filter\r\n     * @param element Element to filter.\r\n     * @param values Values\r\n     */\r\n    MultipleItemQuery.prototype.notInFilter = function (element, values) {\r\n        this.parameters.push(new models_1.Filters.NotInFilter(element, values));\r\n        return this;\r\n    };\r\n    /**\r\n     * Less then filter\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    MultipleItemQuery.prototype.lessThanFilter = function (element, value) {\r\n        this.parameters.push(new models_1.Filters.LessThanFilter(element, value));\r\n        return this;\r\n    };\r\n    /**\r\n     * @param element Element to filter.\r\n     * @param value Value\r\n     */\r\n    MultipleItemQuery.prototype.lessThanOrEqualFilter = function (element, value) {\r\n        this.parameters.push(new models_1.Filters.LessThanOrEqualFilter(element, value));\r\n        return this;\r\n    };\r\n    /**\r\n     * @param element Element to filter.\r\n     * @param lowerValue Lower value of range (e.g. 2)\r\n     * @param higherValue Higher value of range (e.g. 10)\r\n     */\r\n    MultipleItemQuery.prototype.rangeFilter = function (element, lowerValue, higherValue) {\r\n        this.parameters.push(new models_1.Filters.RangeFilter(element, lowerValue, higherValue));\r\n        return this;\r\n    };\r\n    /**\r\n     * Limits the number of items returned by query\r\n     * @param limit Number of items to load\r\n     */\r\n    MultipleItemQuery.prototype.limitParameter = function (limit) {\r\n        this.parameters.push(new models_1.Parameters.LimitParameter(limit));\r\n        return this;\r\n    };\r\n    /**\r\n     * Orders query based on given element and sort order\r\n     * @param element Element by which to order\r\n     * @param sortOrder Asc/Desc order type\r\n     */\r\n    MultipleItemQuery.prototype.orderParameter = function (element, sortOrder) {\r\n        this.parameters.push(new models_1.Parameters.OrderParameter(element, sortOrder));\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets descending order on given element\r\n     * @param element Element by which to order\r\n     */\r\n    MultipleItemQuery.prototype.orderByDescending = function (element) {\r\n        this.parameters.push(new models_1.Parameters.OrderParameter(element, models_1.SortOrder.desc));\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets Ascending order on given element\r\n     * @param element Element by which to order\r\n     */\r\n    MultipleItemQuery.prototype.orderByAscending = function (element) {\r\n        this.parameters.push(new models_1.Parameters.OrderParameter(element, models_1.SortOrder.asc));\r\n        return this;\r\n    };\r\n    /**\r\n     * Skips the selected number of items\r\n     * @param skip Number of items to skip\r\n     */\r\n    MultipleItemQuery.prototype.skipParameter = function (skip) {\r\n        this.parameters.push(new models_1.Parameters.SkipParameter(skip));\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets the runnable Observable\r\n     */\r\n    MultipleItemQuery.prototype.toObservable = function () {\r\n        return _super.prototype.runMultipleItemsQuery.call(this);\r\n    };\r\n    /**\r\n     * Gets 'Url' representation of query\r\n     */\r\n    MultipleItemQuery.prototype.getUrl = function () {\r\n        return _super.prototype.getMultipleItemsQueryUrl.call(this);\r\n    };\r\n    return MultipleItemQuery;\r\n}(base_item_query_class_1.BaseItemQuery));\r\nexports.MultipleItemQuery = MultipleItemQuery;\r\n//# sourceMappingURL=multiple-item-query.class.js.map"]},"metadata":{},"sourceType":"script"}