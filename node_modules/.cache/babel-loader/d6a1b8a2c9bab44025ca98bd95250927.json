{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TaxonomyMapper = void 0;\n\nvar models_1 = require(\"../models\");\n\nvar TaxonomyMapper =\n/** @class */\nfunction () {\n  function TaxonomyMapper() {}\n\n  TaxonomyMapper.prototype.mapTaxonomy = function (taxonomySystem, taxonomyTerms) {\n    if (!taxonomySystem) {\n      throw Error(\"Cannot map taxonomy due to missing 'system' property\");\n    }\n\n    if (!taxonomyTerms) {\n      throw Error(\"Cannot map taxonomy due to missing 'terms' property\");\n    }\n\n    if (!Array.isArray(taxonomyTerms)) {\n      throw Error(\"Cannot map terms because no terms array was provided\");\n    }\n\n    var mappedSystemAttributes = new models_1.TaxonomySystemAttributes({\n      name: taxonomySystem.name,\n      codename: taxonomySystem.codename,\n      id: taxonomySystem.id,\n      lastModified: taxonomySystem.last_modified\n    });\n    var mappedTerms = this.mapTaxonomyTerms(taxonomyTerms);\n    return new models_1.TaxonomyGroup(mappedSystemAttributes, mappedTerms);\n  };\n\n  TaxonomyMapper.prototype.mapTaxonomies = function (taxonomies) {\n    var _this = this;\n\n    if (!taxonomies) {\n      throw Error(\"Cannot map taxonomy due to missing 'taxonomies' property\");\n    }\n\n    if (!Array.isArray(taxonomies)) {\n      throw Error(\"Cannot map taxonomies because the 'taxonomies' property is not an array \");\n    }\n\n    var mappedTaxonomies = [];\n    taxonomies.forEach(function (taxonomy) {\n      mappedTaxonomies.push(_this.mapTaxonomy(taxonomy.system, taxonomy.terms));\n    });\n    return mappedTaxonomies;\n  };\n  /**\r\n   * Recursively map array of taxonomy terms\r\n   * @param termsArray Terms array to map\r\n   */\n\n\n  TaxonomyMapper.prototype.mapTaxonomyTerms = function (termsArray) {\n    var _this = this;\n\n    if (termsArray.length === 0) {\n      return [];\n    }\n\n    var mappedTermsArray = [];\n    termsArray.forEach(function (terms) {\n      var mappedTerms = new models_1.TaxonomyTerms({\n        codename: terms.codename,\n        name: terms.name,\n        terms: _this.mapTaxonomyTerms(terms.terms)\n      });\n      mappedTermsArray.push(mappedTerms);\n    });\n    return mappedTermsArray;\n  };\n\n  return TaxonomyMapper;\n}();\n\nexports.TaxonomyMapper = TaxonomyMapper;","map":{"version":3,"sources":["../../lib/mappers/taxonomy.mapper.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAA,cAAA;AAAA;AAAA,YAAA;AAAA,WAAA,cAAA,GAAA,CAoEC;;AAlEG,EAAA,cAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,cAAZ,EAAiF,aAAjF,EAA0I;AACtI,QAAI,CAAC,cAAL,EAAqB;AACjB,YAAM,KAAK,CAAC,sDAAD,CAAX;AACH;;AAED,QAAI,CAAC,aAAL,EAAoB;AAChB,YAAM,KAAK,CAAC,qDAAD,CAAX;AACH;;AAED,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,aAAd,CAAL,EAAmC;AAC/B,YAAM,KAAK,CAAC,sDAAD,CAAX;AACH;;AAED,QAAM,sBAAsB,GAA6B,IAAI,QAAA,CAAA,wBAAJ,CAA6B;AAClF,MAAA,IAAI,EAAE,cAAc,CAAC,IAD6D;AAElF,MAAA,QAAQ,EAAE,cAAc,CAAC,QAFyD;AAGlF,MAAA,EAAE,EAAE,cAAc,CAAC,EAH+D;AAIlF,MAAA,YAAY,EAAE,cAAc,CAAC;AAJqD,KAA7B,CAAzD;AAOA,QAAM,WAAW,GAAoB,KAAK,gBAAL,CAAsB,aAAtB,CAArC;AAEA,WAAO,IAAI,QAAA,CAAA,aAAJ,CAAkB,sBAAlB,EAA0C,WAA1C,CAAP;AACH,GAvBD;;AAyBA,EAAA,cAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,UAAd,EAAoE;AAApE,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,CAAC,UAAL,EAAiB;AACb,YAAM,KAAK,CAAC,0DAAD,CAAX;AACH;;AAED,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,UAAd,CAAL,EAAgC;AAC5B,YAAM,KAAK,CAAC,0EAAD,CAAX;AACH;;AAED,QAAM,gBAAgB,GAAoB,EAA1C;AAEA,IAAA,UAAU,CAAC,OAAX,CAAmB,UAAA,QAAA,EAAQ;AACvB,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,KAAI,CAAC,WAAL,CAAiB,QAAQ,CAAC,MAA1B,EAAkC,QAAQ,CAAC,KAA3C,CAAtB;AACH,KAFD;AAIA,WAAO,gBAAP;AACH,GAhBD;AAkBA;;;AAGG;;;AACK,EAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,UAAyB,UAAzB,EAA+E;AAA/E,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AACzB,aAAO,EAAP;AACH;;AAED,QAAM,gBAAgB,GAAoB,EAA1C;AAEA,IAAA,UAAU,CAAC,OAAX,CAAmB,UAAA,KAAA,EAAK;AACpB,UAAM,WAAW,GAAG,IAAI,QAAA,CAAA,aAAJ,CAAkB;AAClC,QAAA,QAAQ,EAAE,KAAK,CAAC,QADkB;AAElC,QAAA,IAAI,EAAE,KAAK,CAAC,IAFsB;AAGlC,QAAA,KAAK,EAAE,KAAI,CAAC,gBAAL,CAAsB,KAAK,CAAC,KAA5B;AAH2B,OAAlB,CAApB;AAMA,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB;AACH,KARD;AAUA,WAAO,gBAAP;AACH,GAlBO;;AAmBZ,SAAA,cAAA;AAAC,CApED,EAAA;;AAAa,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TaxonomyMapper = void 0;\r\nvar models_1 = require(\"../models\");\r\nvar TaxonomyMapper = /** @class */ (function () {\r\n    function TaxonomyMapper() {\r\n    }\r\n    TaxonomyMapper.prototype.mapTaxonomy = function (taxonomySystem, taxonomyTerms) {\r\n        if (!taxonomySystem) {\r\n            throw Error(\"Cannot map taxonomy due to missing 'system' property\");\r\n        }\r\n        if (!taxonomyTerms) {\r\n            throw Error(\"Cannot map taxonomy due to missing 'terms' property\");\r\n        }\r\n        if (!Array.isArray(taxonomyTerms)) {\r\n            throw Error(\"Cannot map terms because no terms array was provided\");\r\n        }\r\n        var mappedSystemAttributes = new models_1.TaxonomySystemAttributes({\r\n            name: taxonomySystem.name,\r\n            codename: taxonomySystem.codename,\r\n            id: taxonomySystem.id,\r\n            lastModified: taxonomySystem.last_modified\r\n        });\r\n        var mappedTerms = this.mapTaxonomyTerms(taxonomyTerms);\r\n        return new models_1.TaxonomyGroup(mappedSystemAttributes, mappedTerms);\r\n    };\r\n    TaxonomyMapper.prototype.mapTaxonomies = function (taxonomies) {\r\n        var _this = this;\r\n        if (!taxonomies) {\r\n            throw Error(\"Cannot map taxonomy due to missing 'taxonomies' property\");\r\n        }\r\n        if (!Array.isArray(taxonomies)) {\r\n            throw Error(\"Cannot map taxonomies because the 'taxonomies' property is not an array \");\r\n        }\r\n        var mappedTaxonomies = [];\r\n        taxonomies.forEach(function (taxonomy) {\r\n            mappedTaxonomies.push(_this.mapTaxonomy(taxonomy.system, taxonomy.terms));\r\n        });\r\n        return mappedTaxonomies;\r\n    };\r\n    /**\r\n     * Recursively map array of taxonomy terms\r\n     * @param termsArray Terms array to map\r\n     */\r\n    TaxonomyMapper.prototype.mapTaxonomyTerms = function (termsArray) {\r\n        var _this = this;\r\n        if (termsArray.length === 0) {\r\n            return [];\r\n        }\r\n        var mappedTermsArray = [];\r\n        termsArray.forEach(function (terms) {\r\n            var mappedTerms = new models_1.TaxonomyTerms({\r\n                codename: terms.codename,\r\n                name: terms.name,\r\n                terms: _this.mapTaxonomyTerms(terms.terms)\r\n            });\r\n            mappedTermsArray.push(mappedTerms);\r\n        });\r\n        return mappedTermsArray;\r\n    };\r\n    return TaxonomyMapper;\r\n}());\r\nexports.TaxonomyMapper = TaxonomyMapper;\r\n//# sourceMappingURL=taxonomy.mapper.js.map"]},"metadata":{},"sourceType":"script"}