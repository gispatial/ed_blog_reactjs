{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseDeliveryQueryService = void 0;\n\nvar kontent_core_1 = require(\"@kentico/kontent-core\");\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar common_models_1 = require(\"../models/common/common-models\");\n\nvar BaseDeliveryQueryService =\n/** @class */\nfunction () {\n  function BaseDeliveryQueryService(\n  /**\r\n   * Delivery client configuration\r\n   */\n  config,\n  /**\r\n   * Http service for fetching data\r\n   */\n  httpService,\n  /**\r\n   * Information about the SDK\r\n   */\n  sdkInfo,\n  /**\r\n   * Mapping service\r\n   */\n  mappingService) {\n    this.config = config;\n    this.httpService = httpService;\n    this.sdkInfo = sdkInfo;\n    this.mappingService = mappingService;\n    /**\r\n     * Header name for SDK usage\r\n     */\n\n    this.sdkVersionHeader = 'X-KC-SDKID';\n    /**\r\n     * Default base Url to Kentico Delivery API\r\n     */\n\n    this.defaultBaseDeliveryApiUrl = 'https://deliver.kontent.ai';\n    /**\r\n     * Default preview url to Kentico Delivery API\r\n     */\n\n    this.defaultPreviewDeliveryApiUrl = 'https://preview-deliver.kontent.ai';\n    /**\r\n     * Name of the header used when 'wait for loading new content' feature is used\r\n     */\n\n    this.waitForLoadingNewContentHeader = 'X-KC-Wait-For-Loading-New-Content';\n  }\n  /**\r\n  * Gets url based on the action, query configuration and options (parameters)\r\n  * @param action Action (= url part) that will be hit\r\n  * @param queryConfig Query configuration\r\n  * @param options Query options\r\n  */\n\n\n  BaseDeliveryQueryService.prototype.getUrl = function (action, queryConfig, options) {\n    if (!this.config.proxy || !this.config.proxy.advancedProxyUrlResolver) {\n      return kontent_core_1.urlHelper.addOptionsToUrl(this.getBaseUrl(queryConfig) + action, options);\n    }\n\n    return this.config.proxy.advancedProxyUrlResolver({\n      queryParameters: options ? options : [],\n      queryString: kontent_core_1.urlHelper.addOptionsToUrl('', options),\n      action: action,\n      domain: this.getDomain(queryConfig),\n      queryConfig: queryConfig,\n      projectId: this.config.projectId\n    });\n  };\n  /**\r\n  * Gets proper set of headers for given request.\r\n  * @param queryConfig Query configuration\r\n  * @param additionalHeaders Custom headers\r\n  */\n\n\n  BaseDeliveryQueryService.prototype.getHeaders = function (queryConfig, additionalHeaders) {\n    var headers = [];\n\n    if (additionalHeaders) {\n      headers.push.apply(headers, additionalHeaders);\n    } // add SDK Id header for monitoring SDK usage\n\n\n    headers.push(this.getSdkIdHeader()); // add headers from global config\n\n    if (this.config.globalHeaders) {\n      headers.push.apply(headers, this.config.globalHeaders(queryConfig));\n    } // add query / global headers from query config\n\n\n    headers.push.apply(headers, this.getQueryHeaders(queryConfig));\n\n    if (this.isPreviewModeEnabled(queryConfig) && this.isSecuredModeEnabled(queryConfig)) {\n      throw Error(\"Preview & secured modes cannot be used at the same time.\");\n    } // add preview header is required\n\n\n    if (this.isPreviewModeEnabled(queryConfig) && this.config.previewApiKey) {\n      headers.push(this.getAuthorizationHeader(this.config.previewApiKey));\n    } // add secured mode header is required\n\n\n    if (this.isSecuredModeEnabled(queryConfig) && this.config.secureApiKey) {\n      headers.push(this.getAuthorizationHeader(this.config.secureApiKey));\n    } // add 'X-KC-Wait-For-Loading-New-Content' header if required\n\n\n    if (this.shouldAddWaitForLoadingNewContentHeader(queryConfig)) {\n      headers.push({\n        header: this.waitForLoadingNewContentHeader,\n        value: 'true'\n      });\n    }\n\n    return headers;\n  };\n  /**\r\n   * Http GET response\r\n   * @param url Url of request\r\n   * @param queryConfig Query config configuration\r\n   */\n\n\n  BaseDeliveryQueryService.prototype.getResponse = function (url, queryConfig, serviceConfig) {\n    var _this = this;\n\n    if (!queryConfig) {\n      queryConfig = {};\n    }\n\n    if (!serviceConfig) {\n      serviceConfig = {};\n    }\n\n    return this.httpService.get({\n      url: url\n    }, {\n      retryStrategy: this.config.retryStrategy,\n      headers: this.getHeaders(queryConfig, serviceConfig.headers ? serviceConfig.headers : []),\n      logErrorToConsole: this.config.isDeveloperMode\n    }).pipe(operators_1.catchError(function (error) {\n      return rxjs_1.throwError(_this.mapDeliveryError(error));\n    }));\n  };\n  /**\r\n  * Gets base URL of the request including the project Id\r\n  * @param queryConfig Query configuration\r\n  */\n\n\n  BaseDeliveryQueryService.prototype.getBaseUrl = function (queryConfig) {\n    return this.getDomain(queryConfig) + '/' + this.config.projectId;\n  };\n  /**\r\n  * Indicates if current query should use preview mode\r\n  * @param queryConfig Query configuration\r\n  */\n\n\n  BaseDeliveryQueryService.prototype.isPreviewModeEnabled = function (queryConfig) {\n    if (queryConfig.usePreviewMode !== undefined) {\n      return queryConfig.usePreviewMode;\n    }\n\n    if (!this.config.globalQueryConfig) {\n      return false;\n    }\n\n    if (this.config.globalQueryConfig.usePreviewMode === true) {\n      return true;\n    }\n\n    return false;\n  };\n\n  BaseDeliveryQueryService.prototype.getQueryHeaders = function (queryConfig) {\n    if (queryConfig.customHeaders) {\n      return queryConfig.customHeaders;\n    }\n\n    if (!this.config.globalQueryConfig || !this.config.globalQueryConfig.customHeaders) {\n      return [];\n    }\n\n    return this.config.globalQueryConfig.customHeaders;\n  };\n\n  BaseDeliveryQueryService.prototype.shouldAddWaitForLoadingNewContentHeader = function (queryConfig) {\n    if (queryConfig.waitForLoadingNewContent !== undefined) {\n      return queryConfig.waitForLoadingNewContent;\n    }\n\n    if (!this.config.globalQueryConfig) {\n      return false;\n    }\n\n    if (this.config.globalQueryConfig.waitForLoadingNewContent === true) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n  * Indicates if current query should use secured mode\r\n  * @param queryConfig Query configuration\r\n  */\n\n\n  BaseDeliveryQueryService.prototype.isSecuredModeEnabled = function (queryConfig) {\n    if (queryConfig.useSecuredMode !== undefined) {\n      return queryConfig.useSecuredMode;\n    }\n\n    if (!this.config.globalQueryConfig) {\n      return false;\n    }\n\n    if (this.config.globalQueryConfig.useSecuredMode === true) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n  * Gets preview or standard URL based on client and query configuration\r\n  * @param queryConfig Query configuration\r\n  */\n\n\n  BaseDeliveryQueryService.prototype.getDomain = function (queryConfig) {\n    if (this.isPreviewModeEnabled(queryConfig)) {\n      if (!this.config.previewApiKey) {\n        throw Error(\"Preview API key is not configured.\");\n      } // check custom preview url\n\n\n      if (this.config.proxy && this.config.proxy.basePreviewUrl) {\n        return this.config.proxy.basePreviewUrl;\n      } // use default preview url\n\n\n      return this.defaultPreviewDeliveryApiUrl;\n    } // check custom base url\n\n\n    if (this.config.proxy && this.config.proxy.baseUrl) {\n      return this.config.proxy.baseUrl;\n    }\n\n    return this.defaultBaseDeliveryApiUrl;\n  };\n  /**\r\n  * Gets authorization header. This is used for 'preview' functionality\r\n  */\n\n\n  BaseDeliveryQueryService.prototype.getAuthorizationHeader = function (key) {\n    if (!key) {\n      throw Error(\"Cannot get authorization header because key is invalid\");\n    } // authorization header required for preview mode\n\n\n    return {\n      header: 'authorization',\n      value: \"bearer \" + key\n    };\n  };\n  /**\r\n  * Header identifying SDK type & version for internal purposes of Kentico\r\n  */\n\n\n  BaseDeliveryQueryService.prototype.getSdkIdHeader = function () {\n    return {\n      header: this.sdkVersionHeader,\n      value: this.sdkInfo.host + \";\" + this.sdkInfo.name + \";\" + this.sdkInfo.version\n    };\n  };\n\n  BaseDeliveryQueryService.prototype.mapDeliveryError = function (error) {\n    var _a;\n\n    var axiosError = error;\n\n    if (!axiosError || !axiosError.isAxiosError) {\n      return error;\n    }\n\n    var deliveryErrorData = (_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.data;\n\n    if (!deliveryErrorData || !deliveryErrorData.error_code) {\n      return error;\n    }\n\n    return new common_models_1.DeliveryError({\n      errorCode: deliveryErrorData.error_code,\n      message: deliveryErrorData.message,\n      specificCode: deliveryErrorData.specific_code,\n      requestId: deliveryErrorData.request_id\n    });\n  };\n\n  return BaseDeliveryQueryService;\n}();\n\nexports.BaseDeliveryQueryService = BaseDeliveryQueryService;","map":{"version":3,"sources":["../../lib/services/base-delivery-query.service.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BaseDeliveryQueryService = void 0;\r\nvar kontent_core_1 = require(\"@kentico/kontent-core\");\r\nvar rxjs_1 = require(\"rxjs\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar common_models_1 = require(\"../models/common/common-models\");\r\nvar BaseDeliveryQueryService = /** @class */ (function () {\r\n    function BaseDeliveryQueryService(\r\n    /**\r\n     * Delivery client configuration\r\n     */\r\n    config, \r\n    /**\r\n     * Http service for fetching data\r\n     */\r\n    httpService, \r\n    /**\r\n     * Information about the SDK\r\n     */\r\n    sdkInfo, \r\n    /**\r\n     * Mapping service\r\n     */\r\n    mappingService) {\r\n        this.config = config;\r\n        this.httpService = httpService;\r\n        this.sdkInfo = sdkInfo;\r\n        this.mappingService = mappingService;\r\n        /**\r\n         * Header name for SDK usage\r\n         */\r\n        this.sdkVersionHeader = 'X-KC-SDKID';\r\n        /**\r\n         * Default base Url to Kentico Delivery API\r\n         */\r\n        this.defaultBaseDeliveryApiUrl = 'https://deliver.kontent.ai';\r\n        /**\r\n         * Default preview url to Kentico Delivery API\r\n         */\r\n        this.defaultPreviewDeliveryApiUrl = 'https://preview-deliver.kontent.ai';\r\n        /**\r\n         * Name of the header used when 'wait for loading new content' feature is used\r\n         */\r\n        this.waitForLoadingNewContentHeader = 'X-KC-Wait-For-Loading-New-Content';\r\n    }\r\n    /**\r\n    * Gets url based on the action, query configuration and options (parameters)\r\n    * @param action Action (= url part) that will be hit\r\n    * @param queryConfig Query configuration\r\n    * @param options Query options\r\n    */\r\n    BaseDeliveryQueryService.prototype.getUrl = function (action, queryConfig, options) {\r\n        if (!this.config.proxy || !this.config.proxy.advancedProxyUrlResolver) {\r\n            return kontent_core_1.urlHelper.addOptionsToUrl(this.getBaseUrl(queryConfig) + action, options);\r\n        }\r\n        return this.config.proxy.advancedProxyUrlResolver({\r\n            queryParameters: options ? options : [],\r\n            queryString: kontent_core_1.urlHelper.addOptionsToUrl('', options),\r\n            action: action,\r\n            domain: this.getDomain(queryConfig),\r\n            queryConfig: queryConfig,\r\n            projectId: this.config.projectId\r\n        });\r\n    };\r\n    /**\r\n    * Gets proper set of headers for given request.\r\n    * @param queryConfig Query configuration\r\n    * @param additionalHeaders Custom headers\r\n    */\r\n    BaseDeliveryQueryService.prototype.getHeaders = function (queryConfig, additionalHeaders) {\r\n        var headers = [];\r\n        if (additionalHeaders) {\r\n            headers.push.apply(headers, additionalHeaders);\r\n        }\r\n        // add SDK Id header for monitoring SDK usage\r\n        headers.push(this.getSdkIdHeader());\r\n        // add headers from global config\r\n        if (this.config.globalHeaders) {\r\n            headers.push.apply(headers, this.config.globalHeaders(queryConfig));\r\n        }\r\n        // add query / global headers from query config\r\n        headers.push.apply(headers, this.getQueryHeaders(queryConfig));\r\n        if (this.isPreviewModeEnabled(queryConfig) &&\r\n            this.isSecuredModeEnabled(queryConfig)) {\r\n            throw Error(\"Preview & secured modes cannot be used at the same time.\");\r\n        }\r\n        // add preview header is required\r\n        if (this.isPreviewModeEnabled(queryConfig) && this.config.previewApiKey) {\r\n            headers.push(this.getAuthorizationHeader(this.config.previewApiKey));\r\n        }\r\n        // add secured mode header is required\r\n        if (this.isSecuredModeEnabled(queryConfig) && this.config.secureApiKey) {\r\n            headers.push(this.getAuthorizationHeader(this.config.secureApiKey));\r\n        }\r\n        // add 'X-KC-Wait-For-Loading-New-Content' header if required\r\n        if (this.shouldAddWaitForLoadingNewContentHeader(queryConfig)) {\r\n            headers.push({\r\n                header: this.waitForLoadingNewContentHeader,\r\n                value: 'true'\r\n            });\r\n        }\r\n        return headers;\r\n    };\r\n    /**\r\n     * Http GET response\r\n     * @param url Url of request\r\n     * @param queryConfig Query config configuration\r\n     */\r\n    BaseDeliveryQueryService.prototype.getResponse = function (url, queryConfig, serviceConfig) {\r\n        var _this = this;\r\n        if (!queryConfig) {\r\n            queryConfig = {};\r\n        }\r\n        if (!serviceConfig) {\r\n            serviceConfig = {};\r\n        }\r\n        return this.httpService\r\n            .get({\r\n            url: url,\r\n        }, {\r\n            retryStrategy: this.config.retryStrategy,\r\n            headers: this.getHeaders(queryConfig, serviceConfig.headers ? serviceConfig.headers : []),\r\n            logErrorToConsole: this.config.isDeveloperMode\r\n        })\r\n            .pipe(operators_1.catchError(function (error) {\r\n            return rxjs_1.throwError(_this.mapDeliveryError(error));\r\n        }));\r\n    };\r\n    /**\r\n    * Gets base URL of the request including the project Id\r\n    * @param queryConfig Query configuration\r\n    */\r\n    BaseDeliveryQueryService.prototype.getBaseUrl = function (queryConfig) {\r\n        return this.getDomain(queryConfig) + '/' + this.config.projectId;\r\n    };\r\n    /**\r\n    * Indicates if current query should use preview mode\r\n    * @param queryConfig Query configuration\r\n    */\r\n    BaseDeliveryQueryService.prototype.isPreviewModeEnabled = function (queryConfig) {\r\n        if (queryConfig.usePreviewMode !== undefined) {\r\n            return queryConfig.usePreviewMode;\r\n        }\r\n        if (!this.config.globalQueryConfig) {\r\n            return false;\r\n        }\r\n        if (this.config.globalQueryConfig.usePreviewMode === true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    BaseDeliveryQueryService.prototype.getQueryHeaders = function (queryConfig) {\r\n        if (queryConfig.customHeaders) {\r\n            return queryConfig.customHeaders;\r\n        }\r\n        if (!this.config.globalQueryConfig || !this.config.globalQueryConfig.customHeaders) {\r\n            return [];\r\n        }\r\n        return this.config.globalQueryConfig.customHeaders;\r\n    };\r\n    BaseDeliveryQueryService.prototype.shouldAddWaitForLoadingNewContentHeader = function (queryConfig) {\r\n        if (queryConfig.waitForLoadingNewContent !== undefined) {\r\n            return queryConfig.waitForLoadingNewContent;\r\n        }\r\n        if (!this.config.globalQueryConfig) {\r\n            return false;\r\n        }\r\n        if (this.config.globalQueryConfig.waitForLoadingNewContent === true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n    * Indicates if current query should use secured mode\r\n    * @param queryConfig Query configuration\r\n    */\r\n    BaseDeliveryQueryService.prototype.isSecuredModeEnabled = function (queryConfig) {\r\n        if (queryConfig.useSecuredMode !== undefined) {\r\n            return queryConfig.useSecuredMode;\r\n        }\r\n        if (!this.config.globalQueryConfig) {\r\n            return false;\r\n        }\r\n        if (this.config.globalQueryConfig.useSecuredMode === true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n    * Gets preview or standard URL based on client and query configuration\r\n    * @param queryConfig Query configuration\r\n    */\r\n    BaseDeliveryQueryService.prototype.getDomain = function (queryConfig) {\r\n        if (this.isPreviewModeEnabled(queryConfig)) {\r\n            if (!this.config.previewApiKey) {\r\n                throw Error(\"Preview API key is not configured.\");\r\n            }\r\n            // check custom preview url\r\n            if (this.config.proxy && this.config.proxy.basePreviewUrl) {\r\n                return this.config.proxy.basePreviewUrl;\r\n            }\r\n            // use default preview url\r\n            return this.defaultPreviewDeliveryApiUrl;\r\n        }\r\n        // check custom base url\r\n        if (this.config.proxy && this.config.proxy.baseUrl) {\r\n            return this.config.proxy.baseUrl;\r\n        }\r\n        return this.defaultBaseDeliveryApiUrl;\r\n    };\r\n    /**\r\n    * Gets authorization header. This is used for 'preview' functionality\r\n    */\r\n    BaseDeliveryQueryService.prototype.getAuthorizationHeader = function (key) {\r\n        if (!key) {\r\n            throw Error(\"Cannot get authorization header because key is invalid\");\r\n        }\r\n        // authorization header required for preview mode\r\n        return {\r\n            header: 'authorization',\r\n            value: \"bearer \" + key\r\n        };\r\n    };\r\n    /**\r\n    * Header identifying SDK type & version for internal purposes of Kentico\r\n    */\r\n    BaseDeliveryQueryService.prototype.getSdkIdHeader = function () {\r\n        return {\r\n            header: this.sdkVersionHeader,\r\n            value: this.sdkInfo.host + \";\" + this.sdkInfo.name + \";\" + this.sdkInfo.version\r\n        };\r\n    };\r\n    BaseDeliveryQueryService.prototype.mapDeliveryError = function (error) {\r\n        var _a;\r\n        var axiosError = error;\r\n        if (!axiosError || !axiosError.isAxiosError) {\r\n            return error;\r\n        }\r\n        var deliveryErrorData = (_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.data;\r\n        if (!deliveryErrorData || !deliveryErrorData.error_code) {\r\n            return error;\r\n        }\r\n        return new common_models_1.DeliveryError({\r\n            errorCode: deliveryErrorData.error_code,\r\n            message: deliveryErrorData.message,\r\n            specificCode: deliveryErrorData.specific_code,\r\n            requestId: deliveryErrorData.request_id,\r\n        });\r\n    };\r\n    return BaseDeliveryQueryService;\r\n}());\r\nexports.BaseDeliveryQueryService = BaseDeliveryQueryService;\r\n//# sourceMappingURL=base-delivery-query.service.js.map"]},"metadata":{},"sourceType":"script"}