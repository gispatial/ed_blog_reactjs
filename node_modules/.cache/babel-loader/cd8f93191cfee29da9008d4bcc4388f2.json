{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enumHelper = exports.EnumHelper = void 0;\n\nvar EnumHelper =\n/** @class */\nfunction () {\n  function EnumHelper() {}\n\n  EnumHelper.prototype.getAllNames = function (T) {\n    var enumNames = [];\n\n    for (var key in T) {\n      if (T.hasOwnProperty(key)) {\n        enumNames.push(key);\n      }\n    }\n\n    return enumNames;\n  };\n\n  EnumHelper.prototype.getAllValues = function (T) {\n    var allEnumValues = Object.keys(T).map(function (key) {\n      return T[key];\n    });\n    return allEnumValues;\n  };\n\n  EnumHelper.prototype.getEnumFromValue = function (T, value) {\n    try {\n      if (!value) {\n        return undefined;\n      } // we can map back from index number directly\n\n\n      if (this.isNumeric(value)) {\n        return T[value];\n      } // for strings, we need to compare each value separately\n\n\n      var allEnumValues = this.getAllValues(T);\n      var result = allEnumValues.find(function (m) {\n        return m.toLowerCase() === value.toString().toLowerCase();\n      });\n\n      if (!result) {\n        return undefined;\n      }\n\n      return result;\n    } catch (err) {\n      return undefined;\n    }\n  };\n\n  EnumHelper.prototype.getEnumFromName = function (T, name) {\n    var allNames = this.getAllNames(T);\n\n    for (var _i = 0, allNames_1 = allNames; _i < allNames_1.length; _i++) {\n      var enumName = allNames_1[_i];\n\n      if (enumName.toLowerCase() === name.toLowerCase()) {\n        return T[enumName];\n      }\n    }\n\n    return undefined;\n  };\n\n  EnumHelper.prototype.isNumeric = function (value) {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n  };\n\n  return EnumHelper;\n}();\n\nexports.EnumHelper = EnumHelper;\nexports.enumHelper = new EnumHelper();","map":{"version":3,"sources":["../../lib/helpers/enum.helper.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,UAAA;AAAA;AAAA,YAAA;AAAA,WAAA,UAAA,GAAA,CA4DC;;AA1DG,EAAA,UAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,CAAZ,EAAkB;AACd,QAAM,SAAS,GAAU,EAAzB;;AAEA,SAAK,IAAM,GAAX,IAAkB,CAAlB,EAAqB;AACjB,UAAI,CAAC,CAAC,cAAF,CAAiB,GAAjB,CAAJ,EAA2B;AACvB,QAAA,SAAS,CAAC,IAAV,CAAe,GAAf;AACH;AACJ;;AAED,WAAO,SAAP;AACH,GAVD;;AAYA,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,CAAb,EAAmB;AACf,QAAM,aAAa,GAAU,MAAM,CAAC,IAAP,CAAY,CAAZ,EAAe,GAAf,CAAmB,UAAA,GAAA,EAAG;AAAI,aAAA,CAAC,CAAD,GAAC,CAAD;AAAM,KAAhC,CAA7B;AAEA,WAAO,aAAP;AACH,GAJD;;AAMA,EAAA,UAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAoB,CAApB,EAA4B,KAA5B,EAAkD;AAC9C,QAAI;AACA,UAAI,CAAC,KAAL,EAAY;AACR,eAAO,SAAP;AACH,OAHD,CAKA;;;AACA,UAAI,KAAK,SAAL,CAAe,KAAf,CAAJ,EAA2B;AACvB,eAAU,CAAC,CAAC,KAAD,CAAX;AACH,OARD,CAUA;;;AACA,UAAM,aAAa,GAAG,KAAK,YAAL,CAAkB,CAAlB,CAAtB;AAEA,UAAM,MAAM,GAAG,aAAa,CAAC,IAAd,CAAmB,UAAA,CAAA,EAAC;AAAI,eAAA,CAAC,CAAC,WAAF,OAAoB,KAAK,CAAC,QAAN,GAApB,WAAoB,EAApB;AAAkD,OAA1E,CAAf;;AAEA,UAAI,CAAC,MAAL,EAAa;AACT,eAAO,SAAP;AACH;;AAED,aAAO,MAAP;AACH,KApBD,CAoBE,OAAO,GAAP,EAAY;AACV,aAAO,SAAP;AACH;AACJ,GAxBD;;AA0BA,EAAA,UAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAmB,CAAnB,EAA2B,IAA3B,EAAuC;AACnC,QAAM,QAAQ,GAAG,KAAK,WAAL,CAAiB,CAAjB,CAAjB;;AAEA,SAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,UAAA,GAAA,QAAvB,EAAuB,EAAA,GAAA,UAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAiC;AAA5B,UAAM,QAAQ,GAAA,UAAA,CAAA,EAAA,CAAd;;AACD,UAAI,QAAQ,CAAC,WAAT,OAA2B,IAAI,CAAC,WAAL,EAA/B,EAAmD;AAC/C,eAAO,CAAC,CAAC,QAAD,CAAR;AACH;AACJ;;AACD,WAAO,SAAP;AACH,GATD;;AAWQ,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,KAAlB,EAA4B;AACxB,WAAO,CAAC,KAAK,CAAC,UAAU,CAAC,KAAD,CAAX,CAAN,IAA6B,QAAQ,CAAC,KAAD,CAA5C;AACD,GAFK;;AAGZ,SAAA,UAAA;AAAC,CA5DD,EAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA;AA8DA,OAAA,CAAA,UAAA,GAAa,IAAI,UAAJ,EAAb","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.enumHelper = exports.EnumHelper = void 0;\r\nvar EnumHelper = /** @class */ (function () {\r\n    function EnumHelper() {\r\n    }\r\n    EnumHelper.prototype.getAllNames = function (T) {\r\n        var enumNames = [];\r\n        for (var key in T) {\r\n            if (T.hasOwnProperty(key)) {\r\n                enumNames.push(key);\r\n            }\r\n        }\r\n        return enumNames;\r\n    };\r\n    EnumHelper.prototype.getAllValues = function (T) {\r\n        var allEnumValues = Object.keys(T).map(function (key) { return T[key]; });\r\n        return allEnumValues;\r\n    };\r\n    EnumHelper.prototype.getEnumFromValue = function (T, value) {\r\n        try {\r\n            if (!value) {\r\n                return undefined;\r\n            }\r\n            // we can map back from index number directly\r\n            if (this.isNumeric(value)) {\r\n                return T[value];\r\n            }\r\n            // for strings, we need to compare each value separately\r\n            var allEnumValues = this.getAllValues(T);\r\n            var result = allEnumValues.find(function (m) { return m.toLowerCase() === value.toString().toLowerCase(); });\r\n            if (!result) {\r\n                return undefined;\r\n            }\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            return undefined;\r\n        }\r\n    };\r\n    EnumHelper.prototype.getEnumFromName = function (T, name) {\r\n        var allNames = this.getAllNames(T);\r\n        for (var _i = 0, allNames_1 = allNames; _i < allNames_1.length; _i++) {\r\n            var enumName = allNames_1[_i];\r\n            if (enumName.toLowerCase() === name.toLowerCase()) {\r\n                return T[enumName];\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    EnumHelper.prototype.isNumeric = function (value) {\r\n        return !isNaN(parseFloat(value)) && isFinite(value);\r\n    };\r\n    return EnumHelper;\r\n}());\r\nexports.EnumHelper = EnumHelper;\r\nexports.enumHelper = new EnumHelper();\r\n//# sourceMappingURL=enum.helper.js.map"]},"metadata":{},"sourceType":"script"}