{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseQuery = void 0;\n\nvar models_1 = require(\"../../models\");\n\nvar BaseQuery =\n/** @class */\nfunction () {\n  function BaseQuery(config, queryService) {\n    this.config = config;\n    this.queryService = queryService;\n    this.parameters = [];\n  }\n  /**\r\n   * Adds parameter to query\r\n   * @param name Name of parameter\r\n   * @param value Value of parameter\r\n   */\n\n\n  BaseQuery.prototype.withParameter = function (name, value) {\n    this.parameters.push(new models_1.Parameters.QueryParameter(name, value));\n    return this;\n  };\n  /**\r\n   * Adds parameters to query\r\n   * @param parameters Array of parameters\r\n   */\n\n\n  BaseQuery.prototype.withParameters = function (parameters) {\n    var _a;\n\n    (_a = this.parameters).push.apply(_a, parameters);\n\n    return this;\n  };\n  /**\r\n   * Gets headers used by this query\r\n   */\n\n\n  BaseQuery.prototype.getHeaders = function () {\n    return this.queryService.getHeaders(this._queryConfig);\n  };\n\n  BaseQuery.prototype.withUrl = function (url) {\n    this.customUrl = url;\n    return this;\n  };\n\n  BaseQuery.prototype.getParameters = function () {\n    return this.parameters;\n  };\n\n  BaseQuery.prototype.toPromise = function () {\n    return this.toObservable().toPromise();\n  };\n\n  BaseQuery.prototype.resolveUrlInternal = function (action) {\n    // use custom URL if user specified it\n    if (this.customUrl) {\n      return this.customUrl;\n    } // use original url\n\n\n    return this.queryService.getUrl(action, this._queryConfig, this.getParameters());\n  };\n\n  return BaseQuery;\n}();\n\nexports.BaseQuery = BaseQuery;","map":{"version":3,"sources":["../../../lib/query/common/base-query.class.ts"],"names":[],"mappings":";;;;;;;AAIA,IAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAGA,IAAA,SAAA;AAAA;AAAA,YAAA;AAME,WAAA,SAAA,CACY,MADZ,EAEY,YAFZ,EAEsC;AAD1B,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,YAAA,GAAA,YAAA;AAPF,SAAA,UAAA,GAAgC,EAAhC;AAQL;AAKL;;;;AAIG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,IAAd,EAA4B,KAA5B,EAAyC;AACvC,SAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,QAAA,CAAA,UAAA,CAAW,cAAf,CAA8B,IAA9B,EAAoC,KAApC,CAArB;AACA,WAAO,IAAP;AACD,GAHD;AAKA;;;AAGG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,UAAf,EAA4C;;;AAC1C,KAAA,EAAA,GAAA,KAAK,UAAL,EAAgB,IAAhB,CAAoB,KAApB,CAAoB,EAApB,EAAwB,UAAxB;;AACA,WAAO,IAAP;AACD,GAHD;AAKA;;AAEG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,WAAO,KAAK,YAAL,CAAkB,UAAlB,CAA6B,KAAK,YAAlC,CAAP;AACD,GAFD;;AAIA,EAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,GAAR,EAAmB;AACjB,SAAK,SAAL,GAAiB,GAAjB;AACA,WAAO,IAAP;AACD,GAHD;;AAKA,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,WAAO,KAAK,UAAZ;AACD,GAFD;;AAIA,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,YAAL,GAAoB,SAApB,EAAP;AACD,GAFD;;AAIU,EAAA,SAAA,CAAA,SAAA,CAAA,kBAAA,GAAV,UAA6B,MAA7B,EAA2C;AACzC;AACA,QAAI,KAAK,SAAT,EAAoB;AAClB,aAAO,KAAK,SAAZ;AACD,KAJwC,CAMzC;;;AACA,WAAO,KAAK,YAAL,CAAkB,MAAlB,CACL,MADK,EAEL,KAAK,YAFA,EAGL,KAAK,aAAL,EAHK,CAAP;AAKD,GAZS;;AAaZ,SAAA,SAAA;AAAC,CAlED,EAAA;;AAAsB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BaseQuery = void 0;\r\nvar models_1 = require(\"../../models\");\r\nvar BaseQuery = /** @class */ (function () {\r\n    function BaseQuery(config, queryService) {\r\n        this.config = config;\r\n        this.queryService = queryService;\r\n        this.parameters = [];\r\n    }\r\n    /**\r\n     * Adds parameter to query\r\n     * @param name Name of parameter\r\n     * @param value Value of parameter\r\n     */\r\n    BaseQuery.prototype.withParameter = function (name, value) {\r\n        this.parameters.push(new models_1.Parameters.QueryParameter(name, value));\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds parameters to query\r\n     * @param parameters Array of parameters\r\n     */\r\n    BaseQuery.prototype.withParameters = function (parameters) {\r\n        var _a;\r\n        (_a = this.parameters).push.apply(_a, parameters);\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets headers used by this query\r\n     */\r\n    BaseQuery.prototype.getHeaders = function () {\r\n        return this.queryService.getHeaders(this._queryConfig);\r\n    };\r\n    BaseQuery.prototype.withUrl = function (url) {\r\n        this.customUrl = url;\r\n        return this;\r\n    };\r\n    BaseQuery.prototype.getParameters = function () {\r\n        return this.parameters;\r\n    };\r\n    BaseQuery.prototype.toPromise = function () {\r\n        return this.toObservable().toPromise();\r\n    };\r\n    BaseQuery.prototype.resolveUrlInternal = function (action) {\r\n        // use custom URL if user specified it\r\n        if (this.customUrl) {\r\n            return this.customUrl;\r\n        }\r\n        // use original url\r\n        return this.queryService.getUrl(action, this._queryConfig, this.getParameters());\r\n    };\r\n    return BaseQuery;\r\n}());\r\nexports.BaseQuery = BaseQuery;\r\n//# sourceMappingURL=base-query.class.js.map"]},"metadata":{},"sourceType":"script"}