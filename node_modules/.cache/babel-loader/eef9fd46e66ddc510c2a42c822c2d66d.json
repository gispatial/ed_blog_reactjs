{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Parse5RichTextParser = void 0;\n\nvar parse5_1 = require(\"parse5\");\n\nvar models_1 = require(\"../../models\");\n\nvar parser_configuration_1 = require(\"../parser-configuration\");\n\nvar Parse5RichTextParser =\n/** @class */\nfunction () {\n  function Parse5RichTextParser() {\n    this.resolvedLinkedItemAttribute = 'data-sdk-resolved';\n  }\n\n  Parse5RichTextParser.prototype.resolveRichTextElement = function (contentItemCodename, html, elementName, replacement, config) {\n    // create document\n    var documentFragment = parse5_1.parseFragment(html); // get all linked items\n\n    var result = this.processRichTextElement(contentItemCodename, elementName, this.getChildNodes(documentFragment), replacement, config, {\n      links: [],\n      linkedItems: [],\n      images: []\n    });\n    var resolvedHtml = parse5_1.serialize(documentFragment);\n    return {\n      links: result.links,\n      linkedItems: result.linkedItems,\n      images: result.images,\n      resolvedHtml: resolvedHtml\n    };\n  };\n\n  Parse5RichTextParser.prototype.processRichTextElement = function (contentItemCodename, elementName, elements, replacement, config, result) {\n    var _this = this;\n\n    if (!elements || elements.length === 0) {// there are no more elements\n    } else {\n      elements.forEach(function (element) {\n        if (element.attrs) {\n          _this.processModularContentItem(elementName, element, replacement, config, result);\n\n          _this.processImage(contentItemCodename, elementName, element, replacement, config, result);\n\n          _this.processLink(element, replacement, config, result);\n        }\n\n        if (element.childNodes) {\n          // recursively process all childs\n          _this.processRichTextElement(contentItemCodename, elementName, _this.getChildNodes(element), replacement, config, result);\n        }\n      });\n    }\n\n    return result;\n  };\n\n  Parse5RichTextParser.prototype.processImage = function (contentItemCodename, elementName, element, replacement, config, result) {\n    var attributes = element.attrs;\n\n    if (element.nodeName !== parser_configuration_1.parserConfiguration.imageElementData.nodeName) {\n      // node is not an image\n      return;\n    } // get image id attribute\n\n\n    var dataImageIdAttribute = attributes.find(function (m) {\n      return m.name === parser_configuration_1.parserConfiguration.imageElementData.dataImageId;\n    });\n\n    if (!dataImageIdAttribute) {\n      // image tag does not have image id attribute\n      return;\n    } // prepare link object\n\n\n    var image = {\n      imageId: dataImageIdAttribute.value\n    }; // add link to result\n\n    result.images.push(image);\n    var linkResult = replacement.getImageResult(contentItemCodename, image.imageId, elementName); // set url of image\n\n    var srcAttribute = attributes.find(function (m) {\n      return m.name === parser_configuration_1.parserConfiguration.imageElementData.srcAttribute;\n    });\n\n    if (srcAttribute) {\n      srcAttribute.value = linkResult.url;\n    }\n  };\n\n  Parse5RichTextParser.prototype.processLink = function (element, replacement, config, result) {\n    var attributes = element.attrs;\n\n    if (element.nodeName !== parser_configuration_1.parserConfiguration.linkElementData.nodeName) {\n      // node is not a link\n      return;\n    } // get all links which have item it attribute, ignore all other links (they can be regular links in rich text)\n\n\n    var dataItemIdAttribute = attributes.find(function (m) {\n      return m.name === parser_configuration_1.parserConfiguration.linkElementData.dataItemId;\n    });\n\n    if (!dataItemIdAttribute) {\n      // its either a regular link or the attribute is not defined\n      return;\n    } // prepare link object\n\n\n    var link = {\n      dataItemId: dataItemIdAttribute ? dataItemIdAttribute.value : ''\n    }; // add link to result\n\n    result.links.push(link); // get original link text (the one inside <a> tag from response)\n\n    var originalLinkText = undefined;\n    var linkTextNode = element.childNodes[0];\n\n    if (linkTextNode) {\n      originalLinkText = linkTextNode.value;\n    }\n\n    var urlSlugResult = replacement.getUrlSlugResult(link.dataItemId, originalLinkText || ''); // html has priority over url\n\n    if (urlSlugResult.html) {\n      // replace entire link html\n      var linkHtml = urlSlugResult.html ? urlSlugResult.html : '';\n\n      if (linkHtml) {\n        var linkRootNodes = parse5_1.parseFragment(linkHtml).childNodes;\n\n        if (linkRootNodes.length !== 1) {\n          throw Error(\"Invalid number of root nodes.\");\n        }\n\n        var linkRootNode = linkRootNodes[0];\n        var linkNodes = linkRootNode.childNodes;\n\n        if (linkNodes.length !== 1) {\n          throw Error(\"When specifying 'html' in urlSlugResolver be sure to use single wrapper element.\\n                    Valid syntax: '<p>data</p>'\\n                    Invalid syntax: '<p><data></p><p>another data</p>'\");\n        }\n\n        element.attrs = linkRootNode.attrs; //  preserve attributes from top node\n\n        element.tagName = linkRootNodes[0].tagName; // use first node as a tag wrapper\n\n        element.childNodes = linkNodes;\n      }\n    } else if (urlSlugResult.url) {\n      // replace just link href\n      var hrefAttribute = attributes.find(function (m) {\n        return m.name === 'href';\n      });\n\n      if (!hrefAttribute) {\n        // href attribute is missing\n        if (config.enableAdvancedLogging) {\n          console.warn(\"Cannot set url '\" + urlSlugResult + \"' because 'href' attribute is not present in the <a> tag. Please report this issue if you are seeing this. This warning can be turned off by disabling 'enableAdvancedLogging' option.\");\n        }\n      } else {\n        // get link url\n        var linkUrlResult = typeof urlSlugResult === 'string' ? urlSlugResult : urlSlugResult.url;\n        hrefAttribute.value = linkUrlResult ? linkUrlResult : '';\n      }\n    }\n  };\n\n  Parse5RichTextParser.prototype.processModularContentItem = function (elementName, element, replacement, config, result) {\n    var _this = this;\n\n    var attributes = element.attrs;\n    var dataTypeAttribute = attributes.find(function (m) {\n      return m.name === parser_configuration_1.parserConfiguration.modularContentElementData.dataType;\n    });\n    var resolvedDataAttribute = attributes.find(function (m) {\n      return m.name === _this.resolvedLinkedItemAttribute;\n    }); // process linked itmes\n\n    if (dataTypeAttribute && !resolvedDataAttribute) {\n      // get type of resolving item\n      var type = void 0;\n\n      if (dataTypeAttribute.value === 'item') {\n        type = models_1.RichTextItemDataType.Item; // get codename of the modular content\n\n        var dataCodenameAttribute = attributes.find(function (m) {\n          return m.name === parser_configuration_1.parserConfiguration.modularContentElementData.dataCodename;\n        });\n\n        if (dataCodenameAttribute == null) {\n          throw Error(\"The '\" + parser_configuration_1.parserConfiguration.modularContentElementData.dataCodename + \"' attribute is missing and therefore linked item cannot be retrieved\");\n        }\n\n        var itemCodename = dataCodenameAttribute.value;\n        var itemType = 'linkedItem'; // get rel attribute for components\n\n        var relAttribute = attributes.find(function (m) {\n          return m.name === parser_configuration_1.parserConfiguration.modularContentElementData.relAttribute;\n        });\n\n        if (relAttribute && relAttribute.value === parser_configuration_1.parserConfiguration.modularContentElementData.componentRel) {\n          itemType = 'component';\n        }\n\n        var linkedItem = {\n          dataCodename: dataCodenameAttribute ? dataCodenameAttribute.value : '',\n          dataType: dataTypeAttribute ? dataTypeAttribute.value : '',\n          itemType: itemType\n        }; // add to result\n\n        result.linkedItems.push(linkedItem);\n        var linkedItemHtml = replacement.getLinkedItemHtml(itemCodename, type); // flag element as resolved to avoid duplicate resolving\n\n        element.attrs.push({\n          name: this.resolvedLinkedItemAttribute,\n          value: '1'\n        }); // get html\n\n        var resultHtml = this.resolveRichTextElement(itemCodename, linkedItemHtml, elementName, replacement, config).resolvedHtml; // replace 'object' tag name\n\n        element.tagName = config.linkedItemWrapperTag; // add classes\n\n        element.attrs.push({\n          name: 'class',\n          value: config.linkedItemWrapperClasses.map(function (m) {\n            return m;\n          }).join(' ')\n        }); // get serialized set of nodes from HTML\n\n        var serializedChildNodes = parse5_1.parseFragment(resultHtml); // add child nodes\n\n        element.childNodes = serializedChildNodes.childNodes;\n      } else {\n        if (config.enableAdvancedLogging) {\n          console.warn(\"Rich text element contains object with unsupported data type '\" + dataTypeAttribute.value + \"'\");\n        }\n      }\n    }\n  };\n\n  Parse5RichTextParser.prototype.getChildNodes = function (documentFragment) {\n    return documentFragment.childNodes;\n  };\n\n  return Parse5RichTextParser;\n}();\n\nexports.Parse5RichTextParser = Parse5RichTextParser;","map":{"version":3,"sources":["../../../lib/parser/adapters/parse5-rich-text.parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Parse5RichTextParser = void 0;\r\nvar parse5_1 = require(\"parse5\");\r\nvar models_1 = require(\"../../models\");\r\nvar parser_configuration_1 = require(\"../parser-configuration\");\r\nvar Parse5RichTextParser = /** @class */ (function () {\r\n    function Parse5RichTextParser() {\r\n        this.resolvedLinkedItemAttribute = 'data-sdk-resolved';\r\n    }\r\n    Parse5RichTextParser.prototype.resolveRichTextElement = function (contentItemCodename, html, elementName, replacement, config) {\r\n        // create document\r\n        var documentFragment = parse5_1.parseFragment(html);\r\n        // get all linked items\r\n        var result = this.processRichTextElement(contentItemCodename, elementName, this.getChildNodes(documentFragment), replacement, config, {\r\n            links: [],\r\n            linkedItems: [],\r\n            images: []\r\n        });\r\n        var resolvedHtml = parse5_1.serialize(documentFragment);\r\n        return {\r\n            links: result.links,\r\n            linkedItems: result.linkedItems,\r\n            images: result.images,\r\n            resolvedHtml: resolvedHtml\r\n        };\r\n    };\r\n    Parse5RichTextParser.prototype.processRichTextElement = function (contentItemCodename, elementName, elements, replacement, config, result) {\r\n        var _this = this;\r\n        if (!elements || elements.length === 0) {\r\n            // there are no more elements\r\n        }\r\n        else {\r\n            elements.forEach(function (element) {\r\n                if (element.attrs) {\r\n                    _this.processModularContentItem(elementName, element, replacement, config, result);\r\n                    _this.processImage(contentItemCodename, elementName, element, replacement, config, result);\r\n                    _this.processLink(element, replacement, config, result);\r\n                }\r\n                if (element.childNodes) {\r\n                    // recursively process all childs\r\n                    _this.processRichTextElement(contentItemCodename, elementName, _this.getChildNodes(element), replacement, config, result);\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n    Parse5RichTextParser.prototype.processImage = function (contentItemCodename, elementName, element, replacement, config, result) {\r\n        var attributes = element.attrs;\r\n        if (element.nodeName !== parser_configuration_1.parserConfiguration.imageElementData.nodeName) {\r\n            // node is not an image\r\n            return;\r\n        }\r\n        // get image id attribute\r\n        var dataImageIdAttribute = attributes.find(function (m) { return m.name === parser_configuration_1.parserConfiguration.imageElementData.dataImageId; });\r\n        if (!dataImageIdAttribute) {\r\n            // image tag does not have image id attribute\r\n            return;\r\n        }\r\n        // prepare link object\r\n        var image = {\r\n            imageId: dataImageIdAttribute.value\r\n        };\r\n        // add link to result\r\n        result.images.push(image);\r\n        var linkResult = replacement.getImageResult(contentItemCodename, image.imageId, elementName);\r\n        // set url of image\r\n        var srcAttribute = attributes.find(function (m) { return m.name === parser_configuration_1.parserConfiguration.imageElementData.srcAttribute; });\r\n        if (srcAttribute) {\r\n            srcAttribute.value = linkResult.url;\r\n        }\r\n    };\r\n    Parse5RichTextParser.prototype.processLink = function (element, replacement, config, result) {\r\n        var attributes = element.attrs;\r\n        if (element.nodeName !== parser_configuration_1.parserConfiguration.linkElementData.nodeName) {\r\n            // node is not a link\r\n            return;\r\n        }\r\n        // get all links which have item it attribute, ignore all other links (they can be regular links in rich text)\r\n        var dataItemIdAttribute = attributes.find(function (m) { return m.name === parser_configuration_1.parserConfiguration.linkElementData.dataItemId; });\r\n        if (!dataItemIdAttribute) {\r\n            // its either a regular link or the attribute is not defined\r\n            return;\r\n        }\r\n        // prepare link object\r\n        var link = {\r\n            dataItemId: dataItemIdAttribute ? dataItemIdAttribute.value : ''\r\n        };\r\n        // add link to result\r\n        result.links.push(link);\r\n        // get original link text (the one inside <a> tag from response)\r\n        var originalLinkText = undefined;\r\n        var linkTextNode = element.childNodes[0];\r\n        if (linkTextNode) {\r\n            originalLinkText = linkTextNode.value;\r\n        }\r\n        var urlSlugResult = replacement.getUrlSlugResult(link.dataItemId, originalLinkText || '');\r\n        // html has priority over url\r\n        if (urlSlugResult.html) {\r\n            // replace entire link html\r\n            var linkHtml = urlSlugResult.html\r\n                ? urlSlugResult.html\r\n                : '';\r\n            if (linkHtml) {\r\n                var linkRootNodes = parse5_1.parseFragment(linkHtml).childNodes;\r\n                if (linkRootNodes.length !== 1) {\r\n                    throw Error(\"Invalid number of root nodes.\");\r\n                }\r\n                var linkRootNode = linkRootNodes[0];\r\n                var linkNodes = linkRootNode.childNodes;\r\n                if (linkNodes.length !== 1) {\r\n                    throw Error(\"When specifying 'html' in urlSlugResolver be sure to use single wrapper element.\\n                    Valid syntax: '<p>data</p>'\\n                    Invalid syntax: '<p><data></p><p>another data</p>'\");\r\n                }\r\n                element.attrs = linkRootNode.attrs; //  preserve attributes from top node\r\n                element.tagName = linkRootNodes[0].tagName; // use first node as a tag wrapper\r\n                element.childNodes = linkNodes;\r\n            }\r\n        }\r\n        else if (urlSlugResult.url) {\r\n            // replace just link href\r\n            var hrefAttribute = attributes.find(function (m) { return m.name === 'href'; });\r\n            if (!hrefAttribute) {\r\n                // href attribute is missing\r\n                if (config.enableAdvancedLogging) {\r\n                    console.warn(\"Cannot set url '\" + urlSlugResult + \"' because 'href' attribute is not present in the <a> tag. Please report this issue if you are seeing this. This warning can be turned off by disabling 'enableAdvancedLogging' option.\");\r\n                }\r\n            }\r\n            else {\r\n                // get link url\r\n                var linkUrlResult = typeof urlSlugResult === 'string'\r\n                    ? urlSlugResult\r\n                    : urlSlugResult.url;\r\n                hrefAttribute.value = linkUrlResult ? linkUrlResult : '';\r\n            }\r\n        }\r\n    };\r\n    Parse5RichTextParser.prototype.processModularContentItem = function (elementName, element, replacement, config, result) {\r\n        var _this = this;\r\n        var attributes = element.attrs;\r\n        var dataTypeAttribute = attributes.find(function (m) { return m.name === parser_configuration_1.parserConfiguration.modularContentElementData.dataType; });\r\n        var resolvedDataAttribute = attributes.find(function (m) { return m.name === _this.resolvedLinkedItemAttribute; });\r\n        // process linked itmes\r\n        if (dataTypeAttribute && !resolvedDataAttribute) {\r\n            // get type of resolving item\r\n            var type = void 0;\r\n            if (dataTypeAttribute.value === 'item') {\r\n                type = models_1.RichTextItemDataType.Item;\r\n                // get codename of the modular content\r\n                var dataCodenameAttribute = attributes.find(function (m) { return m.name === parser_configuration_1.parserConfiguration.modularContentElementData.dataCodename; });\r\n                if (dataCodenameAttribute == null) {\r\n                    throw Error(\"The '\" + parser_configuration_1.parserConfiguration.modularContentElementData.dataCodename + \"' attribute is missing and therefore linked item cannot be retrieved\");\r\n                }\r\n                var itemCodename = dataCodenameAttribute.value;\r\n                var itemType = 'linkedItem';\r\n                // get rel attribute for components\r\n                var relAttribute = attributes.find(function (m) { return m.name === parser_configuration_1.parserConfiguration.modularContentElementData.relAttribute; });\r\n                if (relAttribute && relAttribute.value === parser_configuration_1.parserConfiguration.modularContentElementData.componentRel) {\r\n                    itemType = 'component';\r\n                }\r\n                var linkedItem = {\r\n                    dataCodename: dataCodenameAttribute ? dataCodenameAttribute.value : '',\r\n                    dataType: dataTypeAttribute ? dataTypeAttribute.value : '',\r\n                    itemType: itemType\r\n                };\r\n                // add to result\r\n                result.linkedItems.push(linkedItem);\r\n                var linkedItemHtml = replacement.getLinkedItemHtml(itemCodename, type);\r\n                // flag element as resolved to avoid duplicate resolving\r\n                element.attrs.push({\r\n                    name: this.resolvedLinkedItemAttribute,\r\n                    value: '1'\r\n                });\r\n                // get html\r\n                var resultHtml = this.resolveRichTextElement(itemCodename, linkedItemHtml, elementName, replacement, config).resolvedHtml;\r\n                // replace 'object' tag name\r\n                element.tagName = config.linkedItemWrapperTag;\r\n                // add classes\r\n                element.attrs.push({\r\n                    name: 'class',\r\n                    value: config.linkedItemWrapperClasses.map(function (m) { return m; }).join(' ')\r\n                });\r\n                // get serialized set of nodes from HTML\r\n                var serializedChildNodes = parse5_1.parseFragment(resultHtml);\r\n                // add child nodes\r\n                element.childNodes = serializedChildNodes.childNodes;\r\n            }\r\n            else {\r\n                if (config.enableAdvancedLogging) {\r\n                    console.warn(\"Rich text element contains object with unsupported data type '\" + dataTypeAttribute.value + \"'\");\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Parse5RichTextParser.prototype.getChildNodes = function (documentFragment) {\r\n        return documentFragment.childNodes;\r\n    };\r\n    return Parse5RichTextParser;\r\n}());\r\nexports.Parse5RichTextParser = Parse5RichTextParser;\r\n//# sourceMappingURL=parse5-rich-text.parser.js.map"]},"metadata":{},"sourceType":"script"}