{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserRichTextParser = void 0;\n\nvar models_1 = require(\"../../models\");\n\nvar parser_configuration_1 = require(\"../parser-configuration\");\n\nvar BrowserRichTextParser =\n/** @class */\nfunction () {\n  function BrowserRichTextParser() {}\n\n  BrowserRichTextParser.prototype.resolveRichTextElement = function (contentItemCodename, html, elementName, replacement, config) {\n    var doc = this.createWrapperElement(html); // get all linked items\n\n    var result = this.processRichTextElement(contentItemCodename, elementName, doc.children, replacement, config, {\n      links: [],\n      linkedItems: [],\n      images: []\n    });\n    return {\n      links: result.links,\n      linkedItems: result.linkedItems,\n      images: result.images,\n      resolvedHtml: doc.innerHTML\n    };\n  };\n\n  BrowserRichTextParser.prototype.createWrapperElement = function (html) {\n    var element = document.createElement(parser_configuration_1.parserConfiguration.linkedItemWrapperElem);\n    element.innerHTML = html;\n    return element;\n  };\n\n  BrowserRichTextParser.prototype.processRichTextElement = function (contentItemCodename, elementName, htmlCollection, replacement, config, result) {\n    if (!htmlCollection || htmlCollection.length === 0) {// there are no more nodes\n    } else {\n      // extract objects\n      for (var i = 0; i < htmlCollection.length; i++) {\n        var element = htmlCollection[i];\n        var typeAttribute = element.attributes ? element.attributes.getNamedItem('type') : undefined; // process linked items (modular items)\n\n        if (element.attributes && typeAttribute && typeAttribute.value && typeAttribute.value.toLowerCase() === parser_configuration_1.parserConfiguration.modularContentElementData.type.toLowerCase()) {\n          var dataCodenameAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.modularContentElementData.dataCodename);\n          var dataTypeAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.modularContentElementData.dataType);\n\n          if (!dataTypeAttribute) {\n            throw Error('Missing data type attribute. This is likely an error caused by invalid response.');\n          }\n\n          var relAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.modularContentElementData.relAttribute);\n          var itemType = 'linkedItem';\n\n          if (relAttribute && relAttribute.value === parser_configuration_1.parserConfiguration.modularContentElementData.componentRel) {\n            itemType = 'component';\n          } // prepare link item object\n\n\n          var linkItemContentObject = {\n            dataCodename: dataCodenameAttribute ? dataCodenameAttribute.value : '',\n            dataType: dataTypeAttribute ? dataTypeAttribute.value : '',\n            itemType: itemType\n          }; // replace html\n\n          var parentElement = element.parentElement;\n\n          if (!parentElement) {\n            console.warn(\"Could not replace linked item '\" + linkItemContentObject.dataCodename + \"' of '\" + linkItemContentObject.dataType + \"' because parent node is undefined. Please report this error if you are seeing this.\");\n          } else {\n            if (dataTypeAttribute.value === 'item') {\n              // add to result\n              result.linkedItems.push(linkItemContentObject); // create new element\n\n              var newElem = document.createElement(config.linkedItemWrapperTag); // get type of resolving item\n\n              var type = void 0;\n              type = models_1.RichTextItemDataType.Item;\n              var linkedItemHtml = replacement.getLinkedItemHtml(linkItemContentObject.dataCodename, type); // recursively run resolver on the HTML obtained by resolver\n\n              newElem.innerHTML = this.resolveRichTextElement(linkItemContentObject.dataCodename, linkedItemHtml, elementName, replacement, config).resolvedHtml; // add classes\n\n              newElem.className = config.linkedItemWrapperClasses.map(function (m) {\n                return m;\n              }).join(' '); // replace original node with new one\n\n              parentElement.replaceChild(newElem, element);\n            } else {\n              if (config.enableAdvancedLogging) {\n                console.warn(\"Rich text element contains object with unsupported data type '\" + dataTypeAttribute.value + \"'\");\n              }\n            }\n          }\n        } // process links\n\n\n        if (element.nodeName.toLowerCase() === parser_configuration_1.parserConfiguration.linkElementData.nodeName.toLowerCase()) {\n          var dataItemIdAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.linkElementData.dataItemId);\n\n          if (dataItemIdAttribute) {\n            var link = {\n              dataItemId: dataItemIdAttribute ? dataItemIdAttribute.value : ''\n            }; // add to result\n\n            result.links.push(link); // get original link text (the one inside <a> tag)\n\n            var linkText = element.innerHTML;\n            var urlSlugResult = replacement.getUrlSlugResult(link.dataItemId, linkText); // html has priority over url resolver\n\n            if (urlSlugResult.html) {\n              // replace link html\n              var linkHtml = urlSlugResult.html;\n              element.outerHTML = linkHtml !== null && linkHtml !== void 0 ? linkHtml : '';\n            } else if (urlSlugResult.url) {\n              // set link url only\n              var hrefAttribute = element.attributes.getNamedItem('href');\n\n              if (!hrefAttribute) {\n                // href attribute is missing\n                if (config.enableAdvancedLogging) {\n                  console.warn(\"Cannot set url '\" + urlSlugResult + \"' because 'href' attribute is not present in the <a> tag.\\n                                        Please report this issue if you are seeing this.\\n                                        This warning can be turned off by disabling 'enableAdvancedLogging' option.\");\n                }\n              } else {\n                // get link url\n                var linkUrlResult = typeof urlSlugResult === 'string' ? urlSlugResult : urlSlugResult.url;\n                hrefAttribute.value = linkUrlResult ? linkUrlResult : '';\n              }\n            }\n          }\n        } // process images\n\n\n        if (element.nodeName.toLowerCase() === parser_configuration_1.parserConfiguration.imageElementData.nodeName.toLowerCase()) {\n          var dataImageIdAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.imageElementData.dataImageId); // continue only if data image id is present. There could be regular img tags included\n\n          if (dataImageIdAttribute) {\n            var imageObj = {\n              imageId: dataImageIdAttribute.value\n            };\n            result.images.push(imageObj); // get image result\n\n            var imageResult = replacement.getImageResult(contentItemCodename, imageObj.imageId, elementName); // get src attribute of img tag\n\n            var srcAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.imageElementData.srcAttribute);\n\n            if (!srcAttribute) {\n              throw Error(\"Attribute '\" + parser_configuration_1.parserConfiguration.imageElementData.srcAttribute + \"' is missing. Source element: \" + elementName);\n            } // set new image url\n\n\n            srcAttribute.value = imageResult.url;\n          }\n        } // recursively process child nodes\n\n\n        if (element.children && element.children.length > 0) {\n          this.processRichTextElement(contentItemCodename, elementName, element.children, replacement, config, result);\n        }\n      }\n    }\n\n    return result;\n  };\n\n  return BrowserRichTextParser;\n}();\n\nexports.BrowserRichTextParser = BrowserRichTextParser;","map":{"version":3,"sources":["../../../lib/parser/adapters/browser-rich-text.parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BrowserRichTextParser = void 0;\r\nvar models_1 = require(\"../../models\");\r\nvar parser_configuration_1 = require(\"../parser-configuration\");\r\nvar BrowserRichTextParser = /** @class */ (function () {\r\n    function BrowserRichTextParser() {\r\n    }\r\n    BrowserRichTextParser.prototype.resolveRichTextElement = function (contentItemCodename, html, elementName, replacement, config) {\r\n        var doc = this.createWrapperElement(html);\r\n        // get all linked items\r\n        var result = this.processRichTextElement(contentItemCodename, elementName, doc.children, replacement, config, {\r\n            links: [],\r\n            linkedItems: [],\r\n            images: []\r\n        });\r\n        return {\r\n            links: result.links,\r\n            linkedItems: result.linkedItems,\r\n            images: result.images,\r\n            resolvedHtml: doc.innerHTML\r\n        };\r\n    };\r\n    BrowserRichTextParser.prototype.createWrapperElement = function (html) {\r\n        var element = document.createElement(parser_configuration_1.parserConfiguration.linkedItemWrapperElem);\r\n        element.innerHTML = html;\r\n        return element;\r\n    };\r\n    BrowserRichTextParser.prototype.processRichTextElement = function (contentItemCodename, elementName, htmlCollection, replacement, config, result) {\r\n        if (!htmlCollection || htmlCollection.length === 0) {\r\n            // there are no more nodes\r\n        }\r\n        else {\r\n            // extract objects\r\n            for (var i = 0; i < htmlCollection.length; i++) {\r\n                var element = htmlCollection[i];\r\n                var typeAttribute = element.attributes ? element.attributes.getNamedItem('type') : undefined;\r\n                // process linked items (modular items)\r\n                if (element.attributes &&\r\n                    typeAttribute &&\r\n                    typeAttribute.value &&\r\n                    typeAttribute.value.toLowerCase() ===\r\n                        parser_configuration_1.parserConfiguration.modularContentElementData.type.toLowerCase()) {\r\n                    var dataCodenameAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.modularContentElementData.dataCodename);\r\n                    var dataTypeAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.modularContentElementData.dataType);\r\n                    if (!dataTypeAttribute) {\r\n                        throw Error('Missing data type attribute. This is likely an error caused by invalid response.');\r\n                    }\r\n                    var relAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.modularContentElementData.relAttribute);\r\n                    var itemType = 'linkedItem';\r\n                    if (relAttribute &&\r\n                        relAttribute.value === parser_configuration_1.parserConfiguration.modularContentElementData.componentRel) {\r\n                        itemType = 'component';\r\n                    }\r\n                    // prepare link item object\r\n                    var linkItemContentObject = {\r\n                        dataCodename: dataCodenameAttribute ? dataCodenameAttribute.value : '',\r\n                        dataType: dataTypeAttribute ? dataTypeAttribute.value : '',\r\n                        itemType: itemType\r\n                    };\r\n                    // replace html\r\n                    var parentElement = element.parentElement;\r\n                    if (!parentElement) {\r\n                        console.warn(\"Could not replace linked item '\" + linkItemContentObject.dataCodename + \"' of '\" + linkItemContentObject.dataType + \"' because parent node is undefined. Please report this error if you are seeing this.\");\r\n                    }\r\n                    else {\r\n                        if (dataTypeAttribute.value === 'item') {\r\n                            // add to result\r\n                            result.linkedItems.push(linkItemContentObject);\r\n                            // create new element\r\n                            var newElem = document.createElement(config.linkedItemWrapperTag);\r\n                            // get type of resolving item\r\n                            var type = void 0;\r\n                            type = models_1.RichTextItemDataType.Item;\r\n                            var linkedItemHtml = replacement.getLinkedItemHtml(linkItemContentObject.dataCodename, type);\r\n                            // recursively run resolver on the HTML obtained by resolver\r\n                            newElem.innerHTML = this.resolveRichTextElement(linkItemContentObject.dataCodename, linkedItemHtml, elementName, replacement, config).resolvedHtml;\r\n                            // add classes\r\n                            newElem.className = config.linkedItemWrapperClasses.map(function (m) { return m; }).join(' ');\r\n                            // replace original node with new one\r\n                            parentElement.replaceChild(newElem, element);\r\n                        }\r\n                        else {\r\n                            if (config.enableAdvancedLogging) {\r\n                                console.warn(\"Rich text element contains object with unsupported data type '\" + dataTypeAttribute.value + \"'\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // process links\r\n                if (element.nodeName.toLowerCase() === parser_configuration_1.parserConfiguration.linkElementData.nodeName.toLowerCase()) {\r\n                    var dataItemIdAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.linkElementData.dataItemId);\r\n                    if (dataItemIdAttribute) {\r\n                        var link = {\r\n                            dataItemId: dataItemIdAttribute ? dataItemIdAttribute.value : ''\r\n                        };\r\n                        // add to result\r\n                        result.links.push(link);\r\n                        // get original link text (the one inside <a> tag)\r\n                        var linkText = element.innerHTML;\r\n                        var urlSlugResult = replacement.getUrlSlugResult(link.dataItemId, linkText);\r\n                        // html has priority over url resolver\r\n                        if (urlSlugResult.html) {\r\n                            // replace link html\r\n                            var linkHtml = urlSlugResult.html;\r\n                            element.outerHTML = linkHtml !== null && linkHtml !== void 0 ? linkHtml : '';\r\n                        }\r\n                        else if (urlSlugResult.url) {\r\n                            // set link url only\r\n                            var hrefAttribute = element.attributes.getNamedItem('href');\r\n                            if (!hrefAttribute) {\r\n                                // href attribute is missing\r\n                                if (config.enableAdvancedLogging) {\r\n                                    console.warn(\"Cannot set url '\" + urlSlugResult + \"' because 'href' attribute is not present in the <a> tag.\\n                                        Please report this issue if you are seeing this.\\n                                        This warning can be turned off by disabling 'enableAdvancedLogging' option.\");\r\n                                }\r\n                            }\r\n                            else {\r\n                                // get link url\r\n                                var linkUrlResult = typeof urlSlugResult === 'string'\r\n                                    ? urlSlugResult\r\n                                    : urlSlugResult.url;\r\n                                hrefAttribute.value = linkUrlResult ? linkUrlResult : '';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // process images\r\n                if (element.nodeName.toLowerCase() === parser_configuration_1.parserConfiguration.imageElementData.nodeName.toLowerCase()) {\r\n                    var dataImageIdAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.imageElementData.dataImageId);\r\n                    // continue only if data image id is present. There could be regular img tags included\r\n                    if (dataImageIdAttribute) {\r\n                        var imageObj = {\r\n                            imageId: dataImageIdAttribute.value\r\n                        };\r\n                        result.images.push(imageObj);\r\n                        // get image result\r\n                        var imageResult = replacement.getImageResult(contentItemCodename, imageObj.imageId, elementName);\r\n                        // get src attribute of img tag\r\n                        var srcAttribute = element.attributes.getNamedItem(parser_configuration_1.parserConfiguration.imageElementData.srcAttribute);\r\n                        if (!srcAttribute) {\r\n                            throw Error(\"Attribute '\" + parser_configuration_1.parserConfiguration.imageElementData.srcAttribute + \"' is missing. Source element: \" + elementName);\r\n                        }\r\n                        // set new image url\r\n                        srcAttribute.value = imageResult.url;\r\n                    }\r\n                }\r\n                // recursively process child nodes\r\n                if (element.children && element.children.length > 0) {\r\n                    this.processRichTextElement(contentItemCodename, elementName, element.children, replacement, config, result);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return BrowserRichTextParser;\r\n}());\r\nexports.BrowserRichTextParser = BrowserRichTextParser;\r\n//# sourceMappingURL=browser-rich-text.parser.js.map"]},"metadata":{},"sourceType":"script"}