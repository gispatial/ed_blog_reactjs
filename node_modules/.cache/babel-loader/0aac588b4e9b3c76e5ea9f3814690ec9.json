{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeMapper = void 0;\n\nvar models_1 = require(\"../models\");\n\nvar TypeMapper =\n/** @class */\nfunction () {\n  function TypeMapper() {}\n\n  TypeMapper.prototype.mapSingleType = function (response) {\n    return this.mapType(response);\n  };\n\n  TypeMapper.prototype.mapMultipleTypes = function (response) {\n    var that = this;\n    return response.types.map(function (type) {\n      return that.mapType(type);\n    });\n  };\n\n  TypeMapper.prototype.mapType = function (type) {\n    if (!type) {\n      throw Error(\"Cannot map type\");\n    }\n\n    if (!type.elements) {\n      throw Error(\"Cannot map type elements\");\n    }\n\n    var typeSystem = new models_1.ContentTypeSystemAttributes({\n      codename: type.system.codename,\n      id: type.system.id,\n      name: type.system.name,\n      lastModified: type.system.last_modified\n    });\n    var elements = [];\n    var elementNames = Object.getOwnPropertyNames(type.elements);\n    elementNames.forEach(function (elementName) {\n      var typeElement = type.elements[elementName];\n\n      if (!typeElement) {\n        throw Error(\"Cannot find element '\" + elementName + \"' on type '\" + type + \"'\");\n      } // use json property as a codename of the type element\n\n\n      var elementCodename = elementName; // extra properties for certain element types\n\n      var taxonomyGroup = typeElement.taxonomy_group;\n      var options = []; // some elements can contain options\n\n      var rawOptions = typeElement.options;\n\n      if (rawOptions) {\n        if (!Array.isArray(rawOptions)) {\n          throw Error(\"Content type 'options' property has to be an array\");\n        }\n\n        rawOptions.forEach(function (rawOption) {\n          options.push(new models_1.GenericElementOption(rawOption.name, rawOption.codename));\n        });\n      }\n\n      elements.push(new models_1.GenericElement({\n        codename: elementCodename,\n        taxonomyGroup: taxonomyGroup,\n        options: options,\n        name: typeElement.name,\n        type: typeElement.type\n      }));\n    });\n    return new models_1.ContentType({\n      system: typeSystem,\n      elements: elements\n    });\n  };\n\n  return TypeMapper;\n}();\n\nexports.TypeMapper = TypeMapper;","map":{"version":3,"sources":["../../lib/mappers/type.mapper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TypeMapper = void 0;\r\nvar models_1 = require(\"../models\");\r\nvar TypeMapper = /** @class */ (function () {\r\n    function TypeMapper() {\r\n    }\r\n    TypeMapper.prototype.mapSingleType = function (response) {\r\n        return this.mapType(response);\r\n    };\r\n    TypeMapper.prototype.mapMultipleTypes = function (response) {\r\n        var that = this;\r\n        return response.types.map(function (type) {\r\n            return that.mapType(type);\r\n        });\r\n    };\r\n    TypeMapper.prototype.mapType = function (type) {\r\n        if (!type) {\r\n            throw Error(\"Cannot map type\");\r\n        }\r\n        if (!type.elements) {\r\n            throw Error(\"Cannot map type elements\");\r\n        }\r\n        var typeSystem = new models_1.ContentTypeSystemAttributes({\r\n            codename: type.system.codename,\r\n            id: type.system.id,\r\n            name: type.system.name,\r\n            lastModified: type.system.last_modified\r\n        });\r\n        var elements = [];\r\n        var elementNames = Object.getOwnPropertyNames(type.elements);\r\n        elementNames.forEach(function (elementName) {\r\n            var typeElement = type.elements[elementName];\r\n            if (!typeElement) {\r\n                throw Error(\"Cannot find element '\" + elementName + \"' on type '\" + type + \"'\");\r\n            }\r\n            // use json property as a codename of the type element\r\n            var elementCodename = elementName;\r\n            // extra properties for certain element types\r\n            var taxonomyGroup = typeElement.taxonomy_group;\r\n            var options = [];\r\n            // some elements can contain options\r\n            var rawOptions = typeElement.options;\r\n            if (rawOptions) {\r\n                if (!Array.isArray(rawOptions)) {\r\n                    throw Error(\"Content type 'options' property has to be an array\");\r\n                }\r\n                rawOptions.forEach(function (rawOption) {\r\n                    options.push(new models_1.GenericElementOption(rawOption.name, rawOption.codename));\r\n                });\r\n            }\r\n            elements.push(new models_1.GenericElement({\r\n                codename: elementCodename,\r\n                taxonomyGroup: taxonomyGroup,\r\n                options: options,\r\n                name: typeElement.name,\r\n                type: typeElement.type\r\n            }));\r\n        });\r\n        return new models_1.ContentType({\r\n            system: typeSystem,\r\n            elements: elements\r\n        });\r\n    };\r\n    return TypeMapper;\r\n}());\r\nexports.TypeMapper = TypeMapper;\r\n//# sourceMappingURL=type.mapper.js.map"]},"metadata":{},"sourceType":"script"}