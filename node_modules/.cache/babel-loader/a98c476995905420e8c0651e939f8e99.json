{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryService = void 0;\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar base_delivery_query_service_1 = require(\"./base-delivery-query.service\");\n\nvar QueryService =\n/** @class */\nfunction (_super) {\n  __extends(QueryService, _super);\n\n  function QueryService(config, httpService, sdkInfo, mappingService) {\n    var _this = _super.call(this, config, httpService, sdkInfo, mappingService) || this;\n\n    _this.ContinuationHeaderName = 'X-Continuation';\n    return _this;\n  }\n  /**\r\n   * Gets single item from given url\r\n   * @param url Url used to get single item\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  QueryService.prototype.getSingleItem = function (url, queryConfig) {\n    var _this = this;\n\n    return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\n      return _this.mappingService.viewContentItemResponse(response, queryConfig);\n    }));\n  };\n  /**\r\n   * Gets single feed response. Might not contain all items in your project.\r\n   * @param url Url\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  QueryService.prototype.getItemsFeed = function (url, queryConfig) {\n    var _this = this;\n\n    return this.getResponse(url).pipe(operators_1.map(function (response) {\n      return _this.mappingService.itemsFeedResponse(response, queryConfig);\n    }));\n  };\n  /**\r\n   * Gets all items from feed. This method may execute multiple HTTP requests.\r\n   * @param url Url\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  QueryService.prototype.getItemsFeedAll = function (url, queryConfig) {\n    var _this = this;\n\n    var responses = [];\n    return this.getAllItemsFeedResponses(url, {}, responses).pipe(operators_1.map(function () {\n      return _this.mappingService.itemsFeedAllResponse(responses, queryConfig);\n    }));\n  };\n  /**\r\n   * Gets multiple items from given url\r\n   * @param url Url used to get multiple items\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  QueryService.prototype.getMultipleItems = function (url, queryConfig) {\n    var _this = this;\n\n    return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\n      return _this.mappingService.listContentItemsResponse(response, queryConfig);\n    }));\n  };\n  /**\r\n   * Gets single content type from given url\r\n   * @param url Url used to get single type\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  QueryService.prototype.getSingleType = function (url, queryConfig) {\n    var _this = this;\n\n    return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\n      return _this.mappingService.viewContentTypeResponse(response);\n    }));\n  };\n  /**\r\n   * Gets multiple content types from given url\r\n   * @param url Url used to get multiple types\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  QueryService.prototype.getMultipleTypes = function (url, queryConfig) {\n    var _this = this;\n\n    return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\n      return _this.mappingService.listContentTypesResponse(response);\n    }));\n  };\n  /**\r\n   * Gets single taxonomy from given url\r\n   * @param url Url used to get single taxonomy\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  QueryService.prototype.getTaxonomy = function (url, queryConfig) {\n    var _this = this;\n\n    return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\n      return _this.mappingService.viewTaxonomyGroupResponse(response);\n    }));\n  };\n  /**\r\n   * Gets multiple taxonomies from given url\r\n   * @param url Url used to get multiple taxonomies\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  QueryService.prototype.getTaxonomies = function (url, queryConfig) {\n    var _this = this;\n\n    return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\n      return _this.mappingService.listTaxonomyGroupsResponse(response);\n    }));\n  };\n  /**\r\n   * Gets single content type element from given url\r\n   * @param url Url used to get single content type element\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  QueryService.prototype.getElement = function (url, queryConfig) {\n    var _this = this;\n\n    return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\n      return _this.mappingService.viewContentTypeElementResponse(response);\n    }));\n  };\n\n  QueryService.prototype.getAllItemsFeedResponses = function (url, queryConfig, responses, continuationToken) {\n    var _this = this;\n\n    var headers = [];\n\n    if (continuationToken) {\n      headers.push({\n        header: this.ContinuationHeaderName,\n        value: continuationToken\n      });\n    }\n\n    return this.getResponse(url, queryConfig, {\n      headers: headers\n    }).pipe(operators_1.flatMap(function (response) {\n      responses.push(response);\n      var continuationHeader = response.headers.find(function (m) {\n        return m.header.toLowerCase() === _this.ContinuationHeaderName.toLowerCase();\n      });\n\n      if (continuationHeader) {\n        return _this.getAllItemsFeedResponses(url, queryConfig, responses, continuationHeader.value);\n      }\n\n      return rxjs_1.of(undefined);\n    }));\n  };\n\n  return QueryService;\n}(base_delivery_query_service_1.BaseDeliveryQueryService);\n\nexports.QueryService = QueryService;","map":{"version":3,"sources":["../../lib/services/delivery-query.service.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.QueryService = void 0;\r\nvar rxjs_1 = require(\"rxjs\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar base_delivery_query_service_1 = require(\"./base-delivery-query.service\");\r\nvar QueryService = /** @class */ (function (_super) {\r\n    __extends(QueryService, _super);\r\n    function QueryService(config, httpService, sdkInfo, mappingService) {\r\n        var _this = _super.call(this, config, httpService, sdkInfo, mappingService) || this;\r\n        _this.ContinuationHeaderName = 'X-Continuation';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Gets single item from given url\r\n     * @param url Url used to get single item\r\n     * @param queryConfig Query configuration\r\n     */\r\n    QueryService.prototype.getSingleItem = function (url, queryConfig) {\r\n        var _this = this;\r\n        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\r\n            return _this.mappingService.viewContentItemResponse(response, queryConfig);\r\n        }));\r\n    };\r\n    /**\r\n     * Gets single feed response. Might not contain all items in your project.\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    QueryService.prototype.getItemsFeed = function (url, queryConfig) {\r\n        var _this = this;\r\n        return this.getResponse(url).pipe(operators_1.map(function (response) {\r\n            return _this.mappingService.itemsFeedResponse(response, queryConfig);\r\n        }));\r\n    };\r\n    /**\r\n     * Gets all items from feed. This method may execute multiple HTTP requests.\r\n     * @param url Url\r\n     * @param queryConfig Query configuration\r\n     */\r\n    QueryService.prototype.getItemsFeedAll = function (url, queryConfig) {\r\n        var _this = this;\r\n        var responses = [];\r\n        return this.getAllItemsFeedResponses(url, {}, responses).pipe(operators_1.map(function () {\r\n            return _this.mappingService.itemsFeedAllResponse(responses, queryConfig);\r\n        }));\r\n    };\r\n    /**\r\n     * Gets multiple items from given url\r\n     * @param url Url used to get multiple items\r\n     * @param queryConfig Query configuration\r\n     */\r\n    QueryService.prototype.getMultipleItems = function (url, queryConfig) {\r\n        var _this = this;\r\n        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\r\n            return _this.mappingService.listContentItemsResponse(response, queryConfig);\r\n        }));\r\n    };\r\n    /**\r\n     * Gets single content type from given url\r\n     * @param url Url used to get single type\r\n     * @param queryConfig Query configuration\r\n     */\r\n    QueryService.prototype.getSingleType = function (url, queryConfig) {\r\n        var _this = this;\r\n        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\r\n            return _this.mappingService.viewContentTypeResponse(response);\r\n        }));\r\n    };\r\n    /**\r\n     * Gets multiple content types from given url\r\n     * @param url Url used to get multiple types\r\n     * @param queryConfig Query configuration\r\n     */\r\n    QueryService.prototype.getMultipleTypes = function (url, queryConfig) {\r\n        var _this = this;\r\n        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\r\n            return _this.mappingService.listContentTypesResponse(response);\r\n        }));\r\n    };\r\n    /**\r\n     * Gets single taxonomy from given url\r\n     * @param url Url used to get single taxonomy\r\n     * @param queryConfig Query configuration\r\n     */\r\n    QueryService.prototype.getTaxonomy = function (url, queryConfig) {\r\n        var _this = this;\r\n        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\r\n            return _this.mappingService.viewTaxonomyGroupResponse(response);\r\n        }));\r\n    };\r\n    /**\r\n     * Gets multiple taxonomies from given url\r\n     * @param url Url used to get multiple taxonomies\r\n     * @param queryConfig Query configuration\r\n     */\r\n    QueryService.prototype.getTaxonomies = function (url, queryConfig) {\r\n        var _this = this;\r\n        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\r\n            return _this.mappingService.listTaxonomyGroupsResponse(response);\r\n        }));\r\n    };\r\n    /**\r\n     * Gets single content type element from given url\r\n     * @param url Url used to get single content type element\r\n     * @param queryConfig Query configuration\r\n     */\r\n    QueryService.prototype.getElement = function (url, queryConfig) {\r\n        var _this = this;\r\n        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {\r\n            return _this.mappingService.viewContentTypeElementResponse(response);\r\n        }));\r\n    };\r\n    QueryService.prototype.getAllItemsFeedResponses = function (url, queryConfig, responses, continuationToken) {\r\n        var _this = this;\r\n        var headers = [];\r\n        if (continuationToken) {\r\n            headers.push({\r\n                header: this.ContinuationHeaderName,\r\n                value: continuationToken\r\n            });\r\n        }\r\n        return this.getResponse(url, queryConfig, {\r\n            headers: headers\r\n        }).pipe(operators_1.flatMap(function (response) {\r\n            responses.push(response);\r\n            var continuationHeader = response.headers.find(function (m) { return m.header.toLowerCase() === _this.ContinuationHeaderName.toLowerCase(); });\r\n            if (continuationHeader) {\r\n                return _this.getAllItemsFeedResponses(url, queryConfig, responses, continuationHeader.value);\r\n            }\r\n            return rxjs_1.of(undefined);\r\n        }));\r\n    };\r\n    return QueryService;\r\n}(base_delivery_query_service_1.BaseDeliveryQueryService));\r\nexports.QueryService = QueryService;\r\n//# sourceMappingURL=delivery-query.service.js.map"]},"metadata":{},"sourceType":"script"}