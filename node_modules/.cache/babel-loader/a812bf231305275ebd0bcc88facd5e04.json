{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.richTextResolver = exports.RichTextResolver = void 0;\n\nvar elements_1 = require(\"../elements\");\n\nvar RichTextResolver =\n/** @class */\nfunction () {\n  function RichTextResolver() {}\n  /**\r\n   * Resolves linked items inside the Rich text element.\r\n   * Rich text resolved needs to be configured either on the model or query level\r\n   */\n\n\n  RichTextResolver.prototype.resolveData = function (contentItemCodename, html, elementName, data) {\n    var _this = this; // prepare config\n\n\n    var config = {\n      enableAdvancedLogging: data.enableAdvancedLogging,\n      queryConfig: data.queryConfig,\n      linkedItemWrapperTag: data.linkedItemWrapperTag,\n      linkedItemWrapperClasses: data.linkedItemWrapperClasses\n    };\n    var result = data.richTextHtmlParser.resolveRichTextElement(contentItemCodename, html, elementName, {\n      getUrlSlugResult: function (itemId, linkText) {\n        return _this.getUrlSlugResult({\n          config: config,\n          links: data.links,\n          itemId: itemId,\n          getLinkedItem: data.getLinkedItem,\n          linkText: linkText,\n          getGlobalUrlSlugResolver: data.getGlobalUrlSlugResolver\n        });\n      },\n      getLinkedItemHtml: function (itemCodename, itemType) {\n        return _this.getLinkedItemHtml({\n          itemCodename: itemCodename,\n          config: config,\n          getLinkedItem: data.getLinkedItem,\n          itemType: itemType\n        });\n      },\n      getImageResult: function (itemCodename, imageId, xElementName) {\n        return _this.getImageResult({\n          getLinkedItem: data.getLinkedItem,\n          itemCodename: itemCodename,\n          config: config,\n          imageId: imageId,\n          images: data.images,\n          html: html,\n          elementName: xElementName\n        });\n      }\n    }, {\n      enableAdvancedLogging: data.enableAdvancedLogging,\n      queryConfig: data.queryConfig,\n      linkedItemWrapperTag: data.linkedItemWrapperTag,\n      linkedItemWrapperClasses: data.linkedItemWrapperClasses\n    });\n    return {\n      html: result.resolvedHtml,\n      componentCodenames: result.linkedItems.filter(function (m) {\n        return m.itemType === 'component';\n      }).map(function (m) {\n        return m.dataCodename;\n      }),\n      linkedItemCodenames: result.linkedItems.filter(function (m) {\n        return m.itemType === 'linkedItem';\n      }).map(function (m) {\n        return m.dataCodename;\n      })\n    };\n  };\n\n  RichTextResolver.prototype.getImageResult = function (data) {\n    // get linked item\n    var linkedItem = data.getLinkedItem(data.itemCodename);\n\n    if (!linkedItem) {\n      if (data.config.queryConfig.throwErrorForMissingLinkedItems) {\n        throw Error(\"Linked item with codename '\" + data.itemCodename + \"' was not found when resolving image with id '\" + data.imageId + \"'\");\n      }\n\n      if (data.config.enableAdvancedLogging) {\n        console.warn(\"Cannot resolve image with id '\" + data.imageId + \"' because linked item with codename '\" + data.itemCodename + \"' is not available. Empty image URL is returned.\");\n      }\n\n      return {\n        url: ''\n      };\n    } // if image is resolved within nested linked item (e.g. rich text element resolves html of linked item which contains images)\n    // the element name is equal to the 'root' element on which the html is resolved. For this reason we have to go through all\n    // elements in linked item and find the image there.\n\n\n    var image; // try getting image from direct element richtext\n\n    var richTextElement = linkedItem[data.elementName];\n\n    if (richTextElement) {\n      if (!(richTextElement instanceof elements_1.Elements.RichTextElement)) {\n        throw Error(\"Linked item with codename '\" + data.itemCodename + \"' has invalid element '\" + data.elementName + \"'. This element is required to be of RichText type.\");\n      }\n\n      image = richTextElement.images.find(function (m) {\n        return m.imageId === data.imageId;\n      });\n    } // image may be nested, go through all available content items & elements\n\n\n    if (!image) {\n      image = this.tryGetImageFromLinkedItem(data.imageId, linkedItem, data.getLinkedItem);\n    }\n\n    if (!image) {\n      throw Error(\"Image with id '\" + data.imageId + \"' was not found in images data for linked item '\" + data.itemCodename + \"' and element '\" + data.elementName + \"'\");\n    } // use custom resolver if present\n\n\n    if (data.config.queryConfig.richTextImageResolver) {\n      return data.config.queryConfig.richTextImageResolver(image, data.elementName);\n    } // use default resolver\n\n\n    return {\n      url: image.url\n    };\n  };\n\n  RichTextResolver.prototype.tryGetImageFromLinkedItem = function (imageId, contentItem, getLinkedItem) {\n    for (var _i = 0, _a = Object.keys(contentItem); _i < _a.length; _i++) {\n      var propName = _a[_i];\n      var richTextElementProperty = contentItem[propName];\n\n      if (richTextElementProperty instanceof elements_1.Elements.RichTextElement) {\n        var image = richTextElementProperty.images.find(function (m) {\n          return m.imageId === imageId;\n        });\n\n        if (image) {\n          return image;\n        } // try getting images recursively from referenced linked items\n\n\n        for (var _b = 0, _c = richTextElementProperty.linkedItemCodenames; _b < _c.length; _b++) {\n          var linkedItemCodename = _c[_b];\n          var linkedItem = getLinkedItem(linkedItemCodename);\n\n          if (linkedItem) {\n            var linkedImage = this.tryGetImageFromLinkedItem(imageId, linkedItem, getLinkedItem);\n\n            if (linkedImage) {\n              return linkedImage;\n            }\n          }\n        }\n      }\n    }\n\n    return undefined;\n  };\n\n  RichTextResolver.prototype.getLinkedItemHtml = function (data) {\n    // get linked item\n    var linkedItem = data.getLinkedItem(data.itemCodename); // resolving cannot be done if the item is not present in response\n\n    if (!linkedItem) {\n      if (data.config.queryConfig.throwErrorForMissingLinkedItems) {\n        throw Error(\"Linked item with codename '\" + data.itemCodename + \"' could not be found in response and therefore the HTML of rich text element could not be evaluated. Increasing 'depth' parameter of your query may solve this issue.\");\n      }\n\n      if (data.config.enableAdvancedLogging) {\n        console.warn(\"Cannot resolve linked item '\" + data.itemCodename + \"' because it is not available in response. Increasing 'depth' parameter of query may help. Item is resolved to empty string.\");\n      }\n\n      return '';\n    } // get html to replace object using Rich text resolver function\n\n\n    var resolver = undefined;\n\n    if (data.config.queryConfig.richTextResolver) {\n      // use resolved defined by query if available\n      resolver = data.config.queryConfig.richTextResolver;\n    } else {\n      // use default resolver defined in models\n      if (linkedItem._config && linkedItem._config.richTextResolver) {\n        resolver = linkedItem._config.richTextResolver;\n      }\n    } // check resolver\n\n\n    if (!resolver) {\n      if (data.config.enableAdvancedLogging) {\n        console.warn(\"Cannot resolve html of '\" + linkedItem.system.type + \"' used by item '\" + data.itemCodename + \"' type in 'RichTextElement' because no rich text resolver was configured. Item is resolved to empty string.\");\n        return '';\n      }\n\n      return '';\n    }\n\n    return resolver(linkedItem, {\n      contentType: data.itemType\n    });\n  };\n\n  RichTextResolver.prototype.getUrlSlugResult = function (data) {\n    // find link with the id of content item\n    var existingLink = data.links.find(function (m) {\n      return m.linkId === data.itemId;\n    });\n\n    if (!existingLink) {\n      if (data.config.enableAdvancedLogging) {\n        console.warn(\"Cannot resolve URL for item '\" + data.itemId + \"' because no link with this id was found.\");\n      }\n\n      return {\n        html: '',\n        url: ''\n      };\n    }\n\n    var linkedItem = data.getLinkedItem(existingLink.codename); // prepare link context\n\n    var linkContext = {\n      linkText: data.linkText,\n      item: linkedItem,\n      linkId: data.itemId\n    }; // try to resolve link using the resolver passed through the query config\n\n    var queryUrlSlugResolver = data.config.queryConfig.urlSlugResolver;\n\n    if (queryUrlSlugResolver) {\n      // resolve url using query config\n      var queryUrlSlugResult = queryUrlSlugResolver(existingLink, linkContext);\n\n      if (queryUrlSlugResult) {\n        return queryUrlSlugResult;\n      }\n    } // url was not resolved, try using global link resolver for item\n\n\n    var globalUrlSlugResolver = data.getGlobalUrlSlugResolver(existingLink.type);\n\n    if (globalUrlSlugResolver) {\n      var globalUrlSlugResolverResult = globalUrlSlugResolver(existingLink, linkContext);\n\n      if (globalUrlSlugResolverResult) {\n        return globalUrlSlugResolverResult;\n      }\n    } // url wasn't resolved\n\n\n    if (data.config.enableAdvancedLogging) {\n      console.warn(\"Url for item of '\" + existingLink.type + \"' type with id '\" + existingLink.linkId + \"' wasn't resolved. This might be caused by missing 'urlSlugResolver' for given type.\");\n    }\n\n    return {\n      html: '',\n      url: ''\n    };\n  };\n\n  return RichTextResolver;\n}();\n\nexports.RichTextResolver = RichTextResolver;\nexports.richTextResolver = new RichTextResolver();","map":{"version":3,"sources":["../../lib/resolvers/rich-text.resolver.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.richTextResolver = exports.RichTextResolver = void 0;\r\nvar elements_1 = require(\"../elements\");\r\nvar RichTextResolver = /** @class */ (function () {\r\n    function RichTextResolver() {\r\n    }\r\n    /**\r\n     * Resolves linked items inside the Rich text element.\r\n     * Rich text resolved needs to be configured either on the model or query level\r\n     */\r\n    RichTextResolver.prototype.resolveData = function (contentItemCodename, html, elementName, data) {\r\n        var _this = this;\r\n        // prepare config\r\n        var config = {\r\n            enableAdvancedLogging: data.enableAdvancedLogging,\r\n            queryConfig: data.queryConfig,\r\n            linkedItemWrapperTag: data.linkedItemWrapperTag,\r\n            linkedItemWrapperClasses: data.linkedItemWrapperClasses\r\n        };\r\n        var result = data.richTextHtmlParser.resolveRichTextElement(contentItemCodename, html, elementName, {\r\n            getUrlSlugResult: function (itemId, linkText) {\r\n                return _this.getUrlSlugResult({\r\n                    config: config,\r\n                    links: data.links,\r\n                    itemId: itemId,\r\n                    getLinkedItem: data.getLinkedItem,\r\n                    linkText: linkText,\r\n                    getGlobalUrlSlugResolver: data.getGlobalUrlSlugResolver\r\n                });\r\n            },\r\n            getLinkedItemHtml: function (itemCodename, itemType) {\r\n                return _this.getLinkedItemHtml({\r\n                    itemCodename: itemCodename,\r\n                    config: config,\r\n                    getLinkedItem: data.getLinkedItem,\r\n                    itemType: itemType\r\n                });\r\n            },\r\n            getImageResult: function (itemCodename, imageId, xElementName) {\r\n                return _this.getImageResult({\r\n                    getLinkedItem: data.getLinkedItem,\r\n                    itemCodename: itemCodename,\r\n                    config: config,\r\n                    imageId: imageId,\r\n                    images: data.images,\r\n                    html: html,\r\n                    elementName: xElementName\r\n                });\r\n            }\r\n        }, {\r\n            enableAdvancedLogging: data.enableAdvancedLogging,\r\n            queryConfig: data.queryConfig,\r\n            linkedItemWrapperTag: data.linkedItemWrapperTag,\r\n            linkedItemWrapperClasses: data.linkedItemWrapperClasses\r\n        });\r\n        return {\r\n            html: result.resolvedHtml,\r\n            componentCodenames: result.linkedItems.filter(function (m) { return m.itemType === 'component'; }).map(function (m) { return m.dataCodename; }),\r\n            linkedItemCodenames: result.linkedItems.filter(function (m) { return m.itemType === 'linkedItem'; }).map(function (m) { return m.dataCodename; })\r\n        };\r\n    };\r\n    RichTextResolver.prototype.getImageResult = function (data) {\r\n        // get linked item\r\n        var linkedItem = data.getLinkedItem(data.itemCodename);\r\n        if (!linkedItem) {\r\n            if (data.config.queryConfig.throwErrorForMissingLinkedItems) {\r\n                throw Error(\"Linked item with codename '\" + data.itemCodename + \"' was not found when resolving image with id '\" + data.imageId + \"'\");\r\n            }\r\n            if (data.config.enableAdvancedLogging) {\r\n                console.warn(\"Cannot resolve image with id '\" + data.imageId + \"' because linked item with codename '\" + data.itemCodename + \"' is not available. Empty image URL is returned.\");\r\n            }\r\n            return {\r\n                url: ''\r\n            };\r\n        }\r\n        // if image is resolved within nested linked item (e.g. rich text element resolves html of linked item which contains images)\r\n        // the element name is equal to the 'root' element on which the html is resolved. For this reason we have to go through all\r\n        // elements in linked item and find the image there.\r\n        var image;\r\n        // try getting image from direct element richtext\r\n        var richTextElement = linkedItem[data.elementName];\r\n        if (richTextElement) {\r\n            if (!(richTextElement instanceof elements_1.Elements.RichTextElement)) {\r\n                throw Error(\"Linked item with codename '\" + data.itemCodename + \"' has invalid element '\" + data.elementName + \"'. This element is required to be of RichText type.\");\r\n            }\r\n            image = richTextElement.images.find(function (m) { return m.imageId === data.imageId; });\r\n        }\r\n        // image may be nested, go through all available content items & elements\r\n        if (!image) {\r\n            image = this.tryGetImageFromLinkedItem(data.imageId, linkedItem, data.getLinkedItem);\r\n        }\r\n        if (!image) {\r\n            throw Error(\"Image with id '\" + data.imageId + \"' was not found in images data for linked item '\" + data.itemCodename + \"' and element '\" + data.elementName + \"'\");\r\n        }\r\n        // use custom resolver if present\r\n        if (data.config.queryConfig.richTextImageResolver) {\r\n            return data.config.queryConfig.richTextImageResolver(image, data.elementName);\r\n        }\r\n        // use default resolver\r\n        return {\r\n            url: image.url\r\n        };\r\n    };\r\n    RichTextResolver.prototype.tryGetImageFromLinkedItem = function (imageId, contentItem, getLinkedItem) {\r\n        for (var _i = 0, _a = Object.keys(contentItem); _i < _a.length; _i++) {\r\n            var propName = _a[_i];\r\n            var richTextElementProperty = contentItem[propName];\r\n            if (richTextElementProperty instanceof elements_1.Elements.RichTextElement) {\r\n                var image = richTextElementProperty.images.find(function (m) { return m.imageId === imageId; });\r\n                if (image) {\r\n                    return image;\r\n                }\r\n                // try getting images recursively from referenced linked items\r\n                for (var _b = 0, _c = richTextElementProperty.linkedItemCodenames; _b < _c.length; _b++) {\r\n                    var linkedItemCodename = _c[_b];\r\n                    var linkedItem = getLinkedItem(linkedItemCodename);\r\n                    if (linkedItem) {\r\n                        var linkedImage = this.tryGetImageFromLinkedItem(imageId, linkedItem, getLinkedItem);\r\n                        if (linkedImage) {\r\n                            return linkedImage;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    RichTextResolver.prototype.getLinkedItemHtml = function (data) {\r\n        // get linked item\r\n        var linkedItem = data.getLinkedItem(data.itemCodename);\r\n        // resolving cannot be done if the item is not present in response\r\n        if (!linkedItem) {\r\n            if (data.config.queryConfig.throwErrorForMissingLinkedItems) {\r\n                throw Error(\"Linked item with codename '\" + data.itemCodename + \"' could not be found in response and therefore the HTML of rich text element could not be evaluated. Increasing 'depth' parameter of your query may solve this issue.\");\r\n            }\r\n            if (data.config.enableAdvancedLogging) {\r\n                console.warn(\"Cannot resolve linked item '\" + data.itemCodename + \"' because it is not available in response. Increasing 'depth' parameter of query may help. Item is resolved to empty string.\");\r\n            }\r\n            return '';\r\n        }\r\n        // get html to replace object using Rich text resolver function\r\n        var resolver = undefined;\r\n        if (data.config.queryConfig.richTextResolver) {\r\n            // use resolved defined by query if available\r\n            resolver = data.config.queryConfig.richTextResolver;\r\n        }\r\n        else {\r\n            // use default resolver defined in models\r\n            if (linkedItem._config && linkedItem._config.richTextResolver) {\r\n                resolver = linkedItem._config.richTextResolver;\r\n            }\r\n        }\r\n        // check resolver\r\n        if (!resolver) {\r\n            if (data.config.enableAdvancedLogging) {\r\n                console.warn(\"Cannot resolve html of '\" + linkedItem.system.type + \"' used by item '\" + data.itemCodename + \"' type in 'RichTextElement' because no rich text resolver was configured. Item is resolved to empty string.\");\r\n                return '';\r\n            }\r\n            return '';\r\n        }\r\n        return resolver(linkedItem, {\r\n            contentType: data.itemType\r\n        });\r\n    };\r\n    RichTextResolver.prototype.getUrlSlugResult = function (data) {\r\n        // find link with the id of content item\r\n        var existingLink = data.links.find(function (m) { return m.linkId === data.itemId; });\r\n        if (!existingLink) {\r\n            if (data.config.enableAdvancedLogging) {\r\n                console.warn(\"Cannot resolve URL for item '\" + data.itemId + \"' because no link with this id was found.\");\r\n            }\r\n            return {\r\n                html: '',\r\n                url: ''\r\n            };\r\n        }\r\n        var linkedItem = data.getLinkedItem(existingLink.codename);\r\n        // prepare link context\r\n        var linkContext = {\r\n            linkText: data.linkText,\r\n            item: linkedItem,\r\n            linkId: data.itemId\r\n        };\r\n        // try to resolve link using the resolver passed through the query config\r\n        var queryUrlSlugResolver = data.config.queryConfig.urlSlugResolver;\r\n        if (queryUrlSlugResolver) {\r\n            // resolve url using query config\r\n            var queryUrlSlugResult = queryUrlSlugResolver(existingLink, linkContext);\r\n            if (queryUrlSlugResult) {\r\n                return queryUrlSlugResult;\r\n            }\r\n        }\r\n        // url was not resolved, try using global link resolver for item\r\n        var globalUrlSlugResolver = data.getGlobalUrlSlugResolver(existingLink.type);\r\n        if (globalUrlSlugResolver) {\r\n            var globalUrlSlugResolverResult = globalUrlSlugResolver(existingLink, linkContext);\r\n            if (globalUrlSlugResolverResult) {\r\n                return globalUrlSlugResolverResult;\r\n            }\r\n        }\r\n        // url wasn't resolved\r\n        if (data.config.enableAdvancedLogging) {\r\n            console.warn(\"Url for item of '\" + existingLink.type + \"' type with id '\" + existingLink.linkId + \"' wasn't resolved. This might be caused by missing 'urlSlugResolver' for given type.\");\r\n        }\r\n        return {\r\n            html: '',\r\n            url: ''\r\n        };\r\n    };\r\n    return RichTextResolver;\r\n}());\r\nexports.RichTextResolver = RichTextResolver;\r\nexports.richTextResolver = new RichTextResolver();\r\n//# sourceMappingURL=rich-text.resolver.js.map"]},"metadata":{},"sourceType":"script"}