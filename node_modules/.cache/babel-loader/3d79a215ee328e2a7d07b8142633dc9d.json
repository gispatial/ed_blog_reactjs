{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MappingService = void 0;\n\nvar mappers_1 = require(\"../mappers\");\n\nvar models_1 = require(\"../models\");\n\nvar MappingService =\n/** @class */\nfunction () {\n  function MappingService(config, richTextHtmlParser) {\n    this.config = config;\n    this.richTextHtmlParser = richTextHtmlParser;\n    this.typeMapper = new mappers_1.TypeMapper();\n    this.itemMapper = new mappers_1.ItemMapper(config, richTextHtmlParser);\n    this.taxonomyMapper = new mappers_1.TaxonomyMapper();\n    this.genericElementMapper = new mappers_1.GenericElementMapper();\n    this.isDeveloperMode = config.isDeveloperMode === true ? true : false;\n  }\n  /**\r\n   * Gets response for getting a single type\r\n   * @param response Response data\r\n   */\n\n\n  MappingService.prototype.listContentTypesResponse = function (response) {\n    var types = this.typeMapper.mapMultipleTypes(response.data);\n    var pagination = new models_1.Pagination({\n      skip: response.data.pagination.skip,\n      count: response.data.pagination.count,\n      limit: response.data.pagination.limit,\n      nextPage: response.data.pagination.next_page\n    });\n    return new models_1.TypeResponses.ListContentTypesResponse(types, pagination, response, this.isDeveloperMode);\n  };\n  /**\r\n   * Gets resposne for getting multiple types\r\n   * @param response Response data\r\n   * @param options Options\r\n   */\n\n\n  MappingService.prototype.viewContentTypeResponse = function (response) {\n    var type = this.typeMapper.mapSingleType(response.data);\n    return new models_1.TypeResponses.ViewContentTypeResponse(type, response, this.isDeveloperMode);\n  };\n\n  MappingService.prototype.itemsFeedResponse = function (response, queryConfig) {\n    var itemsResult = this.itemMapper.mapItems({\n      linkedItems: Object.values(response.data.modular_content),\n      mainItems: response.data.items,\n      queryConfig: queryConfig\n    });\n    return new models_1.ItemResponses.ItemsFeedResponse(itemsResult.items, itemsResult.linkedItems, response, this.isDeveloperMode);\n  };\n\n  MappingService.prototype.itemsFeedAllResponse = function (responses, queryConfig) {\n    // join data from all responses before resolving items\n    var allMainItems = [];\n    var allLinkedItems = {};\n\n    for (var _i = 0, responses_1 = responses; _i < responses_1.length; _i++) {\n      var response = responses_1[_i];\n      allMainItems.push.apply(allMainItems, response.data.items);\n      allLinkedItems = __assign(__assign({}, allLinkedItems), response.data.modular_content);\n    }\n\n    var itemsResult = this.itemMapper.mapItems({\n      linkedItems: Object.values(allLinkedItems),\n      mainItems: allMainItems,\n      queryConfig: queryConfig\n    });\n    return new models_1.ItemResponses.ItemsFeedAllResponse(itemsResult.items, itemsResult.linkedItems, responses, this.isDeveloperMode);\n  };\n  /**\r\n   * Gets response for getting single item\r\n   * @param response Response data\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  MappingService.prototype.viewContentItemResponse = function (response, queryConfig) {\n    var itemResult = this.itemMapper.mapSingleItemFromResponse(response.data, queryConfig);\n    return new models_1.ItemResponses.ViewContentItemResponse(itemResult.item, itemResult.linkedItems, response, this.isDeveloperMode);\n  };\n  /**\r\n   * Gets response for getting multiple items\r\n   * @param response Response data\r\n   * @param queryConfig Query configuration\r\n   */\n\n\n  MappingService.prototype.listContentItemsResponse = function (response, queryConfig) {\n    var itemsResult = this.itemMapper.mapMultipleItemsFromResponse(response.data, queryConfig);\n    var pagination = new models_1.Pagination({\n      skip: response.data.pagination.skip,\n      count: response.data.pagination.count,\n      limit: response.data.pagination.limit,\n      nextPage: response.data.pagination.next_page,\n      totalCount: response.data.pagination.total_count\n    });\n    return new models_1.ItemResponses.ListContentItemsResponse(itemsResult.items, pagination, itemsResult.linkedItems, response, this.isDeveloperMode);\n  };\n  /**\r\n   * Gets response for getting single taxonomy item\r\n   * @param response Response data\r\n   */\n\n\n  MappingService.prototype.viewTaxonomyGroupResponse = function (response) {\n    var taxonomy = this.taxonomyMapper.mapTaxonomy(response.data.system, response.data.terms);\n    return new models_1.TaxonomyResponses.ViewTaxonomyGroupResponse(taxonomy, response, this.isDeveloperMode);\n  };\n  /**\r\n   * Gets response for getting multiples taxonomies\r\n   * @param response Response data\r\n   */\n\n\n  MappingService.prototype.listTaxonomyGroupsResponse = function (response) {\n    var taxonomies = this.taxonomyMapper.mapTaxonomies(response.data.taxonomies);\n    var pagination = new models_1.Pagination({\n      skip: response.data.pagination.skip,\n      count: response.data.pagination.count,\n      limit: response.data.pagination.limit,\n      nextPage: response.data.pagination.next_page\n    });\n    return new models_1.TaxonomyResponses.ListTaxonomyGroupsResponse(taxonomies, pagination, response, this.isDeveloperMode);\n  };\n  /**\r\n   * Gets response for getting single content type element\r\n   * @param response Response data\r\n   */\n\n\n  MappingService.prototype.viewContentTypeElementResponse = function (response) {\n    var element = this.genericElementMapper.mapElement(response.data);\n    return new models_1.ElementResponses.ViewContentTypeElementResponse(element, response, this.isDeveloperMode);\n  };\n\n  return MappingService;\n}();\n\nexports.MappingService = MappingService;","map":{"version":3,"sources":["../../lib/services/mapping.service.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MappingService = void 0;\r\nvar mappers_1 = require(\"../mappers\");\r\nvar models_1 = require(\"../models\");\r\nvar MappingService = /** @class */ (function () {\r\n    function MappingService(config, richTextHtmlParser) {\r\n        this.config = config;\r\n        this.richTextHtmlParser = richTextHtmlParser;\r\n        this.typeMapper = new mappers_1.TypeMapper();\r\n        this.itemMapper = new mappers_1.ItemMapper(config, richTextHtmlParser);\r\n        this.taxonomyMapper = new mappers_1.TaxonomyMapper();\r\n        this.genericElementMapper = new mappers_1.GenericElementMapper();\r\n        this.isDeveloperMode = config.isDeveloperMode === true ? true : false;\r\n    }\r\n    /**\r\n     * Gets response for getting a single type\r\n     * @param response Response data\r\n     */\r\n    MappingService.prototype.listContentTypesResponse = function (response) {\r\n        var types = this.typeMapper.mapMultipleTypes(response.data);\r\n        var pagination = new models_1.Pagination({\r\n            skip: response.data.pagination.skip,\r\n            count: response.data.pagination.count,\r\n            limit: response.data.pagination.limit,\r\n            nextPage: response.data.pagination.next_page\r\n        });\r\n        return new models_1.TypeResponses.ListContentTypesResponse(types, pagination, response, this.isDeveloperMode);\r\n    };\r\n    /**\r\n     * Gets resposne for getting multiple types\r\n     * @param response Response data\r\n     * @param options Options\r\n     */\r\n    MappingService.prototype.viewContentTypeResponse = function (response) {\r\n        var type = this.typeMapper.mapSingleType(response.data);\r\n        return new models_1.TypeResponses.ViewContentTypeResponse(type, response, this.isDeveloperMode);\r\n    };\r\n    MappingService.prototype.itemsFeedResponse = function (response, queryConfig) {\r\n        var itemsResult = this.itemMapper.mapItems({\r\n            linkedItems: Object.values(response.data.modular_content),\r\n            mainItems: response.data.items,\r\n            queryConfig: queryConfig\r\n        });\r\n        return new models_1.ItemResponses.ItemsFeedResponse(itemsResult.items, itemsResult.linkedItems, response, this.isDeveloperMode);\r\n    };\r\n    MappingService.prototype.itemsFeedAllResponse = function (responses, queryConfig) {\r\n        // join data from all responses before resolving items\r\n        var allMainItems = [];\r\n        var allLinkedItems = {};\r\n        for (var _i = 0, responses_1 = responses; _i < responses_1.length; _i++) {\r\n            var response = responses_1[_i];\r\n            allMainItems.push.apply(allMainItems, response.data.items);\r\n            allLinkedItems = __assign(__assign({}, allLinkedItems), response.data.modular_content);\r\n        }\r\n        var itemsResult = this.itemMapper.mapItems({\r\n            linkedItems: Object.values(allLinkedItems),\r\n            mainItems: allMainItems,\r\n            queryConfig: queryConfig\r\n        });\r\n        return new models_1.ItemResponses.ItemsFeedAllResponse(itemsResult.items, itemsResult.linkedItems, responses, this.isDeveloperMode);\r\n    };\r\n    /**\r\n     * Gets response for getting single item\r\n     * @param response Response data\r\n     * @param queryConfig Query configuration\r\n     */\r\n    MappingService.prototype.viewContentItemResponse = function (response, queryConfig) {\r\n        var itemResult = this.itemMapper.mapSingleItemFromResponse(response.data, queryConfig);\r\n        return new models_1.ItemResponses.ViewContentItemResponse(itemResult.item, itemResult.linkedItems, response, this.isDeveloperMode);\r\n    };\r\n    /**\r\n     * Gets response for getting multiple items\r\n     * @param response Response data\r\n     * @param queryConfig Query configuration\r\n     */\r\n    MappingService.prototype.listContentItemsResponse = function (response, queryConfig) {\r\n        var itemsResult = this.itemMapper.mapMultipleItemsFromResponse(response.data, queryConfig);\r\n        var pagination = new models_1.Pagination({\r\n            skip: response.data.pagination.skip,\r\n            count: response.data.pagination.count,\r\n            limit: response.data.pagination.limit,\r\n            nextPage: response.data.pagination.next_page,\r\n            totalCount: response.data.pagination.total_count\r\n        });\r\n        return new models_1.ItemResponses.ListContentItemsResponse(itemsResult.items, pagination, itemsResult.linkedItems, response, this.isDeveloperMode);\r\n    };\r\n    /**\r\n     * Gets response for getting single taxonomy item\r\n     * @param response Response data\r\n     */\r\n    MappingService.prototype.viewTaxonomyGroupResponse = function (response) {\r\n        var taxonomy = this.taxonomyMapper.mapTaxonomy(response.data.system, response.data.terms);\r\n        return new models_1.TaxonomyResponses.ViewTaxonomyGroupResponse(taxonomy, response, this.isDeveloperMode);\r\n    };\r\n    /**\r\n     * Gets response for getting multiples taxonomies\r\n     * @param response Response data\r\n     */\r\n    MappingService.prototype.listTaxonomyGroupsResponse = function (response) {\r\n        var taxonomies = this.taxonomyMapper.mapTaxonomies(response.data.taxonomies);\r\n        var pagination = new models_1.Pagination({\r\n            skip: response.data.pagination.skip,\r\n            count: response.data.pagination.count,\r\n            limit: response.data.pagination.limit,\r\n            nextPage: response.data.pagination.next_page\r\n        });\r\n        return new models_1.TaxonomyResponses.ListTaxonomyGroupsResponse(taxonomies, pagination, response, this.isDeveloperMode);\r\n    };\r\n    /**\r\n     * Gets response for getting single content type element\r\n     * @param response Response data\r\n     */\r\n    MappingService.prototype.viewContentTypeElementResponse = function (response) {\r\n        var element = this.genericElementMapper.mapElement(response.data);\r\n        return new models_1.ElementResponses.ViewContentTypeElementResponse(element, response, this.isDeveloperMode);\r\n    };\r\n    return MappingService;\r\n}());\r\nexports.MappingService = MappingService;\r\n//# sourceMappingURL=mapping.service.js.map"]},"metadata":{},"sourceType":"script"}