{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultipleTypeQuery = void 0;\n\nvar models_1 = require(\"../../models\");\n\nvar base_type_query_class_1 = require(\"./base-type-query.class\");\n\nvar MultipleTypeQuery =\n/** @class */\nfunction (_super) {\n  __extends(MultipleTypeQuery, _super);\n\n  function MultipleTypeQuery(config, queryService) {\n    var _this = _super.call(this, config, queryService) || this;\n\n    _this.config = config;\n    _this.queryService = queryService;\n    return _this;\n  }\n  /**\r\n  * Limits the number of types returned by query\r\n  * @param limit Number of types to load\r\n  */\n\n\n  MultipleTypeQuery.prototype.limitParameter = function (limit) {\n    this.parameters.push(new models_1.Parameters.LimitParameter(limit));\n    return this;\n  };\n  /**\r\n   * Skips the selected number of types\r\n   * @param skip Number of types to skip\r\n   */\n\n\n  MultipleTypeQuery.prototype.skipParameter = function (skip) {\n    this.parameters.push(new models_1.Parameters.SkipParameter(skip));\n    return this;\n  };\n  /**\r\n  * Gets the runnable Observable\r\n  */\n\n\n  MultipleTypeQuery.prototype.toObservable = function () {\n    return _super.prototype.runMultipleTypesQuery.call(this);\n  };\n  /**\r\n  * Gets 'Url' representation of query\r\n  */\n\n\n  MultipleTypeQuery.prototype.getUrl = function () {\n    return _super.prototype.getMultipleTypesQueryUrl.call(this);\n  };\n\n  return MultipleTypeQuery;\n}(base_type_query_class_1.BaseTypeQuery);\n\nexports.MultipleTypeQuery = MultipleTypeQuery;","map":{"version":3,"sources":["../../../lib/query/type/multiple-type-query.class.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;;AAEnC,WAAA,iBAAA,CACc,MADd,EAEc,YAFd,EAEwC;AAFxC,QAAA,KAAA,GAII,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAN,EAAc,YAAd,KAA2B,IAJ/B;;AACc,IAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACA,IAAA,KAAA,CAAA,YAAA,GAAA,YAAA;;AAGb;AAED;;;AAGE;;;AACF,EAAA,iBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,KAAf,EAA4B;AACxB,SAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,QAAA,CAAA,UAAA,CAAW,cAAf,CAA8B,KAA9B,CAArB;AACA,WAAO,IAAP;AACH,GAHD;AAKA;;;AAGG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,IAAd,EAA0B;AACtB,SAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,QAAA,CAAA,UAAA,CAAW,aAAf,CAA6B,IAA7B,CAArB;AACA,WAAO,IAAP;AACH,GAHD;AAKA;;AAEE;;;AACF,EAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACI,WAAO,MAAA,CAAA,SAAA,CAAM,qBAAN,CAA2B,IAA3B,CAA2B,IAA3B,CAAP;AACH,GAFD;AAIA;;AAEE;;;AACF,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACI,WAAO,MAAA,CAAA,SAAA,CAAM,wBAAN,CAA8B,IAA9B,CAA8B,IAA9B,CAAP;AACH,GAFD;;AAGJ,SAAA,iBAAA;AAAC,CAxCD,CAAuC,uBAAA,CAAA,aAAvC,CAAA;;AAAa,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MultipleTypeQuery = void 0;\r\nvar models_1 = require(\"../../models\");\r\nvar base_type_query_class_1 = require(\"./base-type-query.class\");\r\nvar MultipleTypeQuery = /** @class */ (function (_super) {\r\n    __extends(MultipleTypeQuery, _super);\r\n    function MultipleTypeQuery(config, queryService) {\r\n        var _this = _super.call(this, config, queryService) || this;\r\n        _this.config = config;\r\n        _this.queryService = queryService;\r\n        return _this;\r\n    }\r\n    /**\r\n    * Limits the number of types returned by query\r\n    * @param limit Number of types to load\r\n    */\r\n    MultipleTypeQuery.prototype.limitParameter = function (limit) {\r\n        this.parameters.push(new models_1.Parameters.LimitParameter(limit));\r\n        return this;\r\n    };\r\n    /**\r\n     * Skips the selected number of types\r\n     * @param skip Number of types to skip\r\n     */\r\n    MultipleTypeQuery.prototype.skipParameter = function (skip) {\r\n        this.parameters.push(new models_1.Parameters.SkipParameter(skip));\r\n        return this;\r\n    };\r\n    /**\r\n    * Gets the runnable Observable\r\n    */\r\n    MultipleTypeQuery.prototype.toObservable = function () {\r\n        return _super.prototype.runMultipleTypesQuery.call(this);\r\n    };\r\n    /**\r\n    * Gets 'Url' representation of query\r\n    */\r\n    MultipleTypeQuery.prototype.getUrl = function () {\r\n        return _super.prototype.getMultipleTypesQueryUrl.call(this);\r\n    };\r\n    return MultipleTypeQuery;\r\n}(base_type_query_class_1.BaseTypeQuery));\r\nexports.MultipleTypeQuery = MultipleTypeQuery;\r\n//# sourceMappingURL=multiple-type-query.class.js.map"]},"metadata":{},"sourceType":"script"}