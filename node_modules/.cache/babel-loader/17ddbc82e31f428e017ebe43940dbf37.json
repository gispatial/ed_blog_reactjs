{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DeliveryClient = void 0;\n\nvar kontent_core_1 = require(\"@kentico/kontent-core\");\n\nvar parser_adapter_1 = require(\"../parser/parser-adapter\");\n\nvar query_1 = require(\"../query\");\n\nvar sdk_info_generated_1 = require(\"../sdk-info.generated\");\n\nvar services_1 = require(\"../services\");\n\nvar DeliveryClient =\n/** @class */\nfunction () {\n  /**\r\n   * Delivery client used to fetch data from Kentico Kontent\r\n   * @constructor\r\n   * @param {IDeliveryClientConfig} config - The client configuration\r\n   */\n  function DeliveryClient(config) {\n    this.config = config;\n\n    if (!config) {\n      throw Error(\"Delivery client configuration is not set\");\n    }\n\n    this.mappingService = new services_1.MappingService(config, config.richTextParserAdapter ? config.richTextParserAdapter : parser_adapter_1.getParserAdapter());\n    this.queryService = new services_1.QueryService(config, config.httpService ? config.httpService : new kontent_core_1.HttpService({\n      requestInterceptor: config.httpInterceptors && config.httpInterceptors.requestInterceptor ? config.httpInterceptors.requestInterceptor : undefined,\n      responseInterceptor: config.httpInterceptors && config.httpInterceptors.responseInterceptor ? config.httpInterceptors.responseInterceptor : undefined\n    }), {\n      host: sdk_info_generated_1.sdkInfo.host,\n      name: sdk_info_generated_1.sdkInfo.name,\n      version: sdk_info_generated_1.sdkInfo.version\n    }, this.mappingService);\n  }\n  /**\r\n   * Gets query for multiple types\r\n   */\n\n\n  DeliveryClient.prototype.types = function () {\n    return new query_1.MultipleTypeQuery(this.config, this.queryService);\n  };\n  /**\r\n   * Gets query for single type\r\n   * @param {string} typeCodename - Codename of the type to fetch\r\n   */\n\n\n  DeliveryClient.prototype.type = function (typeCodename) {\n    return new query_1.SingleTypeQuery(this.config, this.queryService, typeCodename);\n  };\n  /**\r\n   * Gets query for multiple items\r\n   */\n\n\n  DeliveryClient.prototype.items = function () {\n    return new query_1.MultipleItemQuery(this.config, this.queryService);\n  };\n  /**\r\n   * Gets query for single item\r\n   * @param {string} codename - Codename of item to fetch\r\n   */\n\n\n  DeliveryClient.prototype.item = function (codename) {\n    return new query_1.SingleItemQuery(this.config, this.queryService, codename);\n  };\n  /**\r\n   * Gets query for items feed. Executes single HTTP request only. Might not get all items from your Kontent project.\r\n   */\n\n\n  DeliveryClient.prototype.itemsFeed = function () {\n    return new query_1.ItemsFeedQuery(this.config, this.queryService);\n  };\n  /**\r\n   * Gets query for all items feed. This may execute multiple HTTP calls depending on number of items in your Kontent project.\r\n   */\n\n\n  DeliveryClient.prototype.itemsFeedAll = function () {\n    return new query_1.ItemsFeedQueryAll(this.config, this.queryService);\n  };\n  /**\r\n   * Gets query for single taxonomy\r\n   * @param {string} codename - Codename of taxonomy to fetch\r\n   */\n\n\n  DeliveryClient.prototype.taxonomy = function (codename) {\n    return new query_1.TaxonomyQuery(this.config, this.queryService, codename);\n  };\n  /**\r\n   * Gets query for multiple taxonomies\r\n   */\n\n\n  DeliveryClient.prototype.taxonomies = function () {\n    return new query_1.TaxonomiesQuery(this.config, this.queryService);\n  };\n  /**\r\n   * Gets query for an element within a type\r\n   * @param {string} typeCodename - Codename of the type\r\n   * @param {string} elementCodename - Codename of the element\r\n   */\n\n\n  DeliveryClient.prototype.element = function (typeCodename, elementCodename) {\n    return new query_1.ElementQuery(this.config, this.queryService, typeCodename, elementCodename);\n  };\n\n  return DeliveryClient;\n}();\n\nexports.DeliveryClient = DeliveryClient;","map":{"version":3,"sources":["../../lib/client/delivery-client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DeliveryClient = void 0;\r\nvar kontent_core_1 = require(\"@kentico/kontent-core\");\r\nvar parser_adapter_1 = require(\"../parser/parser-adapter\");\r\nvar query_1 = require(\"../query\");\r\nvar sdk_info_generated_1 = require(\"../sdk-info.generated\");\r\nvar services_1 = require(\"../services\");\r\nvar DeliveryClient = /** @class */ (function () {\r\n    /**\r\n     * Delivery client used to fetch data from Kentico Kontent\r\n     * @constructor\r\n     * @param {IDeliveryClientConfig} config - The client configuration\r\n     */\r\n    function DeliveryClient(config) {\r\n        this.config = config;\r\n        if (!config) {\r\n            throw Error(\"Delivery client configuration is not set\");\r\n        }\r\n        this.mappingService = new services_1.MappingService(config, config.richTextParserAdapter ? config.richTextParserAdapter : parser_adapter_1.getParserAdapter());\r\n        this.queryService = new services_1.QueryService(config, config.httpService\r\n            ? config.httpService\r\n            : new kontent_core_1.HttpService({\r\n                requestInterceptor: config.httpInterceptors && config.httpInterceptors.requestInterceptor\r\n                    ? config.httpInterceptors.requestInterceptor\r\n                    : undefined,\r\n                responseInterceptor: config.httpInterceptors && config.httpInterceptors.responseInterceptor\r\n                    ? config.httpInterceptors.responseInterceptor\r\n                    : undefined\r\n            }), {\r\n            host: sdk_info_generated_1.sdkInfo.host,\r\n            name: sdk_info_generated_1.sdkInfo.name,\r\n            version: sdk_info_generated_1.sdkInfo.version\r\n        }, this.mappingService);\r\n    }\r\n    /**\r\n     * Gets query for multiple types\r\n     */\r\n    DeliveryClient.prototype.types = function () {\r\n        return new query_1.MultipleTypeQuery(this.config, this.queryService);\r\n    };\r\n    /**\r\n     * Gets query for single type\r\n     * @param {string} typeCodename - Codename of the type to fetch\r\n     */\r\n    DeliveryClient.prototype.type = function (typeCodename) {\r\n        return new query_1.SingleTypeQuery(this.config, this.queryService, typeCodename);\r\n    };\r\n    /**\r\n     * Gets query for multiple items\r\n     */\r\n    DeliveryClient.prototype.items = function () {\r\n        return new query_1.MultipleItemQuery(this.config, this.queryService);\r\n    };\r\n    /**\r\n     * Gets query for single item\r\n     * @param {string} codename - Codename of item to fetch\r\n     */\r\n    DeliveryClient.prototype.item = function (codename) {\r\n        return new query_1.SingleItemQuery(this.config, this.queryService, codename);\r\n    };\r\n    /**\r\n     * Gets query for items feed. Executes single HTTP request only. Might not get all items from your Kontent project.\r\n     */\r\n    DeliveryClient.prototype.itemsFeed = function () {\r\n        return new query_1.ItemsFeedQuery(this.config, this.queryService);\r\n    };\r\n    /**\r\n     * Gets query for all items feed. This may execute multiple HTTP calls depending on number of items in your Kontent project.\r\n     */\r\n    DeliveryClient.prototype.itemsFeedAll = function () {\r\n        return new query_1.ItemsFeedQueryAll(this.config, this.queryService);\r\n    };\r\n    /**\r\n     * Gets query for single taxonomy\r\n     * @param {string} codename - Codename of taxonomy to fetch\r\n     */\r\n    DeliveryClient.prototype.taxonomy = function (codename) {\r\n        return new query_1.TaxonomyQuery(this.config, this.queryService, codename);\r\n    };\r\n    /**\r\n     * Gets query for multiple taxonomies\r\n     */\r\n    DeliveryClient.prototype.taxonomies = function () {\r\n        return new query_1.TaxonomiesQuery(this.config, this.queryService);\r\n    };\r\n    /**\r\n     * Gets query for an element within a type\r\n     * @param {string} typeCodename - Codename of the type\r\n     * @param {string} elementCodename - Codename of the element\r\n     */\r\n    DeliveryClient.prototype.element = function (typeCodename, elementCodename) {\r\n        return new query_1.ElementQuery(this.config, this.queryService, typeCodename, elementCodename);\r\n    };\r\n    return DeliveryClient;\r\n}());\r\nexports.DeliveryClient = DeliveryClient;\r\n//# sourceMappingURL=delivery-client.js.map"]},"metadata":{},"sourceType":"script"}